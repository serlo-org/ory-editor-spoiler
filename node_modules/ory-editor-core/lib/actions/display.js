'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var SET_DISPLAY_MODE = exports.SET_DISPLAY_MODE = 'SET_DISPLAY_MODE';
var SET_PREVIOUS_DISPLAY_MODE = exports.SET_PREVIOUS_DISPLAY_MODE = 'SET_PREVIOUS_DISPLAY_MODE';
var DISPLAY_MODE_PREVIEW = exports.DISPLAY_MODE_PREVIEW = 'preview';
var DISPLAY_MODE_LAYOUT = exports.DISPLAY_MODE_LAYOUT = 'layout';
var DISPLAY_MODE_EDIT = exports.DISPLAY_MODE_EDIT = 'edit';
var DISPLAY_MODE_INSERT = exports.DISPLAY_MODE_INSERT = 'insert';
var DISPLAY_MODE_RESIZING = exports.DISPLAY_MODE_RESIZING = 'resizing';
var DEFAULT_DISPLAY_MODE = exports.DEFAULT_DISPLAY_MODE = DISPLAY_MODE_PREVIEW;

var setDisplayMode = function setDisplayMode(mode) {
  var remember = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return function () {
    return {
      type: SET_DISPLAY_MODE,
      ts: new Date(),
      mode: mode,
      remember: remember
    };
  };
};

/**
 * Dispatch to switch to insert display mode.
 */
var insertMode = exports.insertMode = setDisplayMode(DISPLAY_MODE_INSERT);

/**
 * Dispatch to switch to edit display mode.
 */
var editMode = exports.editMode = setDisplayMode(DISPLAY_MODE_EDIT);

/**
 * Dispatch to switch to preview display mode.
 */
var previewMode = exports.previewMode = setDisplayMode(DISPLAY_MODE_PREVIEW);

/**
 * Dispatch to switch to layout display mode.
 */
var layoutMode = exports.layoutMode = setDisplayMode(DISPLAY_MODE_LAYOUT);

/**
 * Dispatch to switch to resize display mode.
 */
var resizeMode = exports.resizeMode = setDisplayMode(DISPLAY_MODE_RESIZING);

/**
 * Dispatch to switch to the last display mode, or the fallback if reverting is not possible.
 */
var previousMode = exports.previousMode = function previousMode(fallback) {
  return { type: SET_PREVIOUS_DISPLAY_MODE, fallback: fallback };
};
//# sourceMappingURL=display.js.map