'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.actions = undefined;

var _core = require('./cell/core');

var _drag = require('./cell/drag');

var _insert = require('./cell/insert');

var _undo2 = require('./undo');

var _editables = require('./editables');

var _display = require('./display');

var actions = exports.actions = function actions(dispatch) {
  return {
    cell: {
      updateContent: function updateContent(id, state) {
        return dispatch((0, _core.updateCellContent)(id)(state));
      },
      updateLayout: function updateLayout(id, state) {
        return dispatch((0, _core.updateCellLayout)(id)(state));
      },

      remove: function remove() {
        return dispatch(_core.removeCell.apply(undefined, arguments));
      },
      resize: function resize(id, size) {
        return dispatch((0, _core.resizeCell)(id)(size));
      },
      focus: function focus(id, source) {
        return dispatch((0, _core.focusCell)(id)(source));
      },
      focusNext: function focusNext(id) {
        return dispatch((0, _core.focusNextCell)(id)());
      },
      focusPrevious: function focusPrevious(id) {
        return dispatch((0, _core.focusPreviousCell)(id)());
      },
      blurAll: function blurAll() {
        return dispatch(_core.blurAllCells.apply(undefined, arguments));
      },

      drag: function drag() {
        return dispatch(_drag.dragCell.apply(undefined, arguments));
      },
      cancelDrag: function cancelDrag() {
        return dispatch(_drag.cancelCellDrag.apply(undefined, arguments));
      },

      hoverLeftOf: function hoverLeftOf() {
        return dispatch(_drag.cellHoverLeftOf.apply(undefined, arguments));
      },
      hoverRightOf: function hoverRightOf() {
        return dispatch(_drag.cellHoverRightOf.apply(undefined, arguments));
      },
      hoverAbove: function hoverAbove() {
        return dispatch(_drag.cellHoverAbove.apply(undefined, arguments));
      },
      hoverBelow: function hoverBelow() {
        return dispatch(_drag.cellHoverBelow.apply(undefined, arguments));
      },
      hoverFloatingLeft: function hoverFloatingLeft() {
        return dispatch(_drag.cellHoverInlineLeft.apply(undefined, arguments));
      },
      hoverFloatingRight: function hoverFloatingRight() {
        return dispatch(_drag.cellHoverInlineRight.apply(undefined, arguments));
      },
      clearHover: function clearHover() {
        return dispatch(_drag.clearHover.apply(undefined, arguments));
      },

      insertBelow: function insertBelow() {
        return dispatch(_insert.insertCellBelow.apply(undefined, arguments));
      },
      insertAbove: function insertAbove() {
        return dispatch(_insert.insertCellAbove.apply(undefined, arguments));
      },
      insertRightOf: function insertRightOf() {
        return dispatch(_insert.insertCellRightOf.apply(undefined, arguments));
      },
      insertLeftOf: function insertLeftOf() {
        return dispatch(_insert.insertCellLeftOf.apply(undefined, arguments));
      },
      insertFloatingLeft: function insertFloatingLeft() {
        return dispatch(_insert.insertCellLeftInline.apply(undefined, arguments));
      },
      insertFloatingRight: function insertFloatingRight() {
        return dispatch(_insert.insertCellRightInline.apply(undefined, arguments));
      }
    },

    editable: {
      add: function add() {
        return dispatch(_editables.updateEditable.apply(undefined, arguments));
      },
      update: function update() {
        return dispatch(_editables.updateEditable.apply(undefined, arguments));
      }
    },

    mode: {
      insert: function insert() {
        return dispatch(_display.insertMode.apply(undefined, arguments));
      },
      edit: function edit() {
        return dispatch(_display.editMode.apply(undefined, arguments));
      },
      preview: function preview() {
        return dispatch(_display.previewMode.apply(undefined, arguments));
      },
      layout: function layout() {
        return dispatch(_display.layoutMode.apply(undefined, arguments));
      },
      resize: function resize() {
        return dispatch(_display.resizeMode.apply(undefined, arguments));
      }
    },

    undo: function undo() {
      return dispatch(_undo2.undo.apply(undefined, arguments));
    }, redo: function redo() {
      return dispatch(_undo2.redo.apply(undefined, arguments));
    }
  };
};
//# sourceMappingURL=index.js.map