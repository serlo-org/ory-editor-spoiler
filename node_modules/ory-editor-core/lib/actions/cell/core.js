'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFallbackCell = exports.blurAllCells = exports.blurCell = exports.focusPreviousCell = exports.focusNextCell = exports.focusCell = exports.resizeCell = exports.removeCell = exports.updateCellLayout = exports.updateCellContent = exports.CELL_CREATE_FALLBACK = exports.CELL_FOCUS_NEXT = exports.CELL_FOCUS_PREV = exports.CELL_BLUR_ALL = exports.CELL_BLUR = exports.CELL_FOCUS = exports.CELL_RESIZE = exports.CELL_REMOVE = exports.CELL_UPDATE_LAYOUT = exports.CELL_UPDATE_CONTENT = undefined;

var _helpers = require('../helpers');

var CELL_UPDATE_CONTENT = exports.CELL_UPDATE_CONTENT = 'CELL_UPDATE_CONTENT';
var CELL_UPDATE_LAYOUT = exports.CELL_UPDATE_LAYOUT = 'CELL_UPDATE_LAYOUT';
var CELL_REMOVE = exports.CELL_REMOVE = 'CELL_REMOVE';
var CELL_RESIZE = exports.CELL_RESIZE = 'CELL_RESIZE';
var CELL_FOCUS = exports.CELL_FOCUS = 'CELL_FOCUS';
var CELL_BLUR = exports.CELL_BLUR = 'CELL_BLUR';
var CELL_BLUR_ALL = exports.CELL_BLUR_ALL = 'CELL_BLUR_ALL';
var CELL_FOCUS_PREV = exports.CELL_FOCUS_PREV = 'CELL_FOCUS_PREV';
var CELL_FOCUS_NEXT = exports.CELL_FOCUS_NEXT = 'CELL_FOCUS_NEXT';
var CELL_CREATE_FALLBACK = exports.CELL_CREATE_FALLBACK = 'CELL_CREATE_FALLBACK';

/**
 * An action creator for updating a cell's content data.
 *
 * @example
 * // const store = redux.createStore()
 * // const cell = { id: '1', ... }
 * store.dispatch(updateCellContent(cell.id, { foo: 'bar' }))
 *
 * @param {string} id The id of the cell that should be updated
 * @return {Action}
 */
var updateCellContent = exports.updateCellContent = function updateCellContent(id) {
  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return {
      type: CELL_UPDATE_CONTENT,
      ts: new Date(),
      id: id,
      state: state
    };
  };
};

/**
 * An action creator for updating a cell's layout data.
 *
 * @example
 * // const store = redux.createStore()
 * // const cell = { id: '1', ... }
 * store.dispatch(updateCellLayout(cell.id, { foo: 'bar' }))
 *
 * @param {string} id The id of the cell that should be updated
 * @return {Action}
 */
var updateCellLayout = exports.updateCellLayout = function updateCellLayout(id) {
  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return {
      type: CELL_UPDATE_LAYOUT,
      ts: new Date(),
      id: id,
      state: state
    };
  };
};

/**
 * An action creator for removing a cell.
 *
 * @example
 * // const store = redux.createStore()
 * // const cell = { id: '1', ... }
 * store.dispatch(removeCell(cell.id, ['1', '2', '3', '4', ...]))
 *
 * @param {string} id The id of the cell that should be removed.
 * @param {string} ids An array of IDs for new cells that might be created.
 * @return {Action}
 */
var removeCell = exports.removeCell = function removeCell(id) {
  var ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return {
    type: CELL_REMOVE,
    ts: new Date(),
    id: id,
    ids: ids.length > 0 ? ids : (0, _helpers.gen)(1)
  };
};

/**
 * An action creator for resizing a cell.
 *
 * @example
 * // const store = redux.createStore()
 * // const cell = { id: '1', ... }
 * store.dispatch(resizeCell(cell.id)(size))
 *
 * @param {string} id The id of the cell that should be removed.
 * @param {number} size The cell's new size.
 * @return {Function}
 */
var resizeCell = exports.resizeCell = function resizeCell(id) {
  return function () {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    return {
      type: CELL_RESIZE,
      ts: new Date(),
      id: id,
      size: size
    };
  };
};

/**
 * Dispatch to focus a cell.
 */
var focusCell = exports.focusCell = function focusCell(id) {
  return function () {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        source = _ref.source;

    return {
      type: CELL_FOCUS,
      ts: new Date(),
      id: id,
      source: source
    };
  };
};

/**
 * Dispatch to focus a cell.
 */
var focusNextCell = exports.focusNextCell = function focusNextCell(id) {
  return function () {
    return {
      type: CELL_FOCUS_NEXT,
      ts: new Date(),
      id: id
    };
  };
};

/**
 * Dispatch to focus a cell.
 */
var focusPreviousCell = exports.focusPreviousCell = function focusPreviousCell(id) {
  return function () {
    return {
      type: CELL_FOCUS_PREV,
      ts: new Date(),
      id: id
    };
  };
};

/**
 * Dispatch to blur a cell.
 */
var blurCell = exports.blurCell = function blurCell(id) {
  return function () {
    return {
      type: CELL_BLUR,
      ts: new Date(),
      id: id
    };
  };
};

/**
 * Dispatch to blur all cells. For example when clicking on document body.
 */
var blurAllCells = exports.blurAllCells = function blurAllCells() {
  return {
    type: CELL_BLUR_ALL,
    ts: new Date()
  };
};

/**
 * Creates a fallback cell, usually done when an editable is empty.
 */
var createFallbackCell = exports.createFallbackCell = function createFallbackCell(fallback, editable) {
  return {
    type: CELL_CREATE_FALLBACK,
    ts: new Date(),
    editable: editable,
    ids: (0, _helpers.gen)(1),
    fallback: fallback
  };
};
//# sourceMappingURL=core.js.map