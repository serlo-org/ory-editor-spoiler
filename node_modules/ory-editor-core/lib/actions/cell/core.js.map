{"version":3,"sources":["../../../src/actions/cell/core.js"],"names":["CELL_UPDATE_CONTENT","CELL_UPDATE_LAYOUT","CELL_REMOVE","CELL_RESIZE","CELL_FOCUS","CELL_BLUR","CELL_BLUR_ALL","CELL_FOCUS_PREV","CELL_FOCUS_NEXT","CELL_CREATE_FALLBACK","updateCellContent","id","state","type","ts","Date","updateCellLayout","removeCell","ids","length","resizeCell","size","focusCell","source","focusNextCell","focusPreviousCell","blurCell","blurAllCells","createFallbackCell","fallback","editable"],"mappings":"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","file":"core.js","sourcesContent":["// @flow\nimport type { Action } from '../../types/redux'\n\nimport { gen } from '../helpers'\n\nexport const CELL_UPDATE_CONTENT = 'CELL_UPDATE_CONTENT'\nexport const CELL_UPDATE_LAYOUT = 'CELL_UPDATE_LAYOUT'\nexport const CELL_REMOVE = 'CELL_REMOVE'\nexport const CELL_RESIZE = 'CELL_RESIZE'\nexport const CELL_FOCUS = 'CELL_FOCUS'\nexport const CELL_BLUR = 'CELL_BLUR'\nexport const CELL_BLUR_ALL = 'CELL_BLUR_ALL'\nexport const CELL_FOCUS_PREV = 'CELL_FOCUS_PREV'\nexport const CELL_FOCUS_NEXT = 'CELL_FOCUS_NEXT'\nexport const CELL_CREATE_FALLBACK = 'CELL_CREATE_FALLBACK'\n\n/**\n * An action creator for updating a cell's content data.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(updateCellContent(cell.id, { foo: 'bar' }))\n *\n * @param {string} id The id of the cell that should be updated\n * @return {Action}\n */\nexport const updateCellContent = (id: string) => (state: {} = {}): Action => ({\n  type: CELL_UPDATE_CONTENT,\n  ts: new Date(),\n  id,\n  state\n})\n\n/**\n * An action creator for updating a cell's layout data.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(updateCellLayout(cell.id, { foo: 'bar' }))\n *\n * @param {string} id The id of the cell that should be updated\n * @return {Action}\n */\nexport const updateCellLayout = (id: string) => (state: {} = {}): Action => ({\n  type: CELL_UPDATE_LAYOUT,\n  ts: new Date(),\n  id,\n  state\n})\n\n/**\n * An action creator for removing a cell.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(removeCell(cell.id, ['1', '2', '3', '4', ...]))\n *\n * @param {string} id The id of the cell that should be removed.\n * @param {string} ids An array of IDs for new cells that might be created.\n * @return {Action}\n */\nexport const removeCell = (id: string, ids: Array < string > = []): Action => ({\n  type: CELL_REMOVE,\n  ts: new Date(),\n  id,\n  ids: ids.length > 0 ? ids : gen(1)\n})\n\n/**\n * An action creator for resizing a cell.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(resizeCell(cell.id)(size))\n *\n * @param {string} id The id of the cell that should be removed.\n * @param {number} size The cell's new size.\n * @return {Function}\n */\nexport const resizeCell = (id: string) => (size: number = 1): Action => ({\n  type: CELL_RESIZE,\n  ts: new Date(),\n  id,\n  size\n})\n\n/**\n * Dispatch to focus a cell.\n */\nexport const focusCell = (id: string) => ({ source }: { source?: string } = {}): Action => ({\n  type: CELL_FOCUS,\n  ts: new Date(),\n  id,\n  source\n})\n\n/**\n * Dispatch to focus a cell.\n */\nexport const focusNextCell = (id: string) => (): Action => ({\n  type: CELL_FOCUS_NEXT,\n  ts: new Date(),\n  id\n})\n\n/**\n * Dispatch to focus a cell.\n */\nexport const focusPreviousCell = (id: string) => (): Action => ({\n  type: CELL_FOCUS_PREV,\n  ts: new Date(),\n  id\n})\n\n/**\n * Dispatch to blur a cell.\n */\nexport const blurCell = (id: string) => (): Action => ({\n  type: CELL_BLUR,\n  ts: new Date(),\n  id\n})\n\n/**\n * Dispatch to blur all cells. For example when clicking on document body.\n */\nexport const blurAllCells = (): Action => ({\n  type: CELL_BLUR_ALL,\n  ts: new Date()\n})\n\n/**\n * Creates a fallback cell, usually done when an editable is empty.\n */\nexport const createFallbackCell = (fallback: any, editable: string) => ({\n  type: CELL_CREATE_FALLBACK,\n  ts: new Date(),\n  editable,\n  ids: gen(1),\n  fallback\n})\n"]}