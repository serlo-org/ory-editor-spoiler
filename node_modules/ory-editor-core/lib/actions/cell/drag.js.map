{"version":3,"sources":["../../../src/actions/cell/drag.js"],"names":["CELL_DRAG_HOVER","CELL_DRAG","CELL_DRAG_CANCEL","CLEAR_CLEAR_HOVER","cellHover","drag","id","hover","level","position","type","ts","Date","cellHoverLeftOf","LEFT_OF","cellHoverRightOf","RIGHT_OF","cellHoverAbove","ABOVE","cellHoverBelow","BELOW","cellHoverInlineLeft","INLINE_LEFT","cellHoverInlineRight","INLINE_RIGHT","dragCell","clearHover","cancelCellDrag"],"mappings":";;;;;;;AASA;;AAEO,IAAMA,4CAAkB,iBAAxB,C,CAXP;;;;;;AAYO,IAAMC,gCAAY,WAAlB;AACA,IAAMC,8CAAmB,kBAAzB;AACA,IAAMC,gDAAoB,mBAA1B;;AAEP;;;;;;;;;;;;;AAaO,IAAMC,gCAAY,SAAZA,SAAY;AAAA,MAAOC,IAAP,QAAGC,EAAH;AAAA,MAA2BC,KAA3B,SAAuBD,EAAvB;AAAA,MAA0CE,KAA1C,uEAA0D,CAA1D;AAAA,MAA6DC,QAA7D;AAAA,SAA2F;AAClHC,UAAMV,eAD4G;AAElHW,QAAI,IAAIC,IAAJ,EAF8G;AAGlHP,cAHkH;AAIlHE,gBAJkH;AAKlHC,gBALkH;AAMlHC;AANkH,GAA3F;AAAA,CAAlB;;AASP;;;;;;;;;;;;AAYO,IAAMI,4CAAkB,SAAlBA,eAAkB,CAACR,IAAD,EAAaE,KAAb,EAA0BC,KAA1B;AAAA,SAA4CJ,UAAUC,IAAV,EAAgBE,KAAhB,EAAuBC,KAAvB,EAA8B,iBAAUM,OAAxC,CAA5C;AAAA,CAAxB;;AAEP;;;;;;;;;;;;AAYO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAACV,IAAD,EAAaE,KAAb,EAA0BC,KAA1B;AAAA,SAA4CJ,UAAUC,IAAV,EAAgBE,KAAhB,EAAuBC,KAAvB,EAA8B,iBAAUQ,QAAxC,CAA5C;AAAA,CAAzB;;AAEP;;;;;;;;;;;;AAYO,IAAMC,0CAAiB,SAAjBA,cAAiB,CAACZ,IAAD,EAAaE,KAAb,EAA0BC,KAA1B;AAAA,SAA4CJ,UAAUC,IAAV,EAAgBE,KAAhB,EAAuBC,KAAvB,EAA8B,iBAAUU,KAAxC,CAA5C;AAAA,CAAvB;;AAEP;;;;;;;;;;;;AAYO,IAAMC,0CAAiB,SAAjBA,cAAiB,CAACd,IAAD,EAAaE,KAAb,EAA0BC,KAA1B;AAAA,SAA4CJ,UAAUC,IAAV,EAAgBE,KAAhB,EAAuBC,KAAvB,EAA8B,iBAAUY,KAAxC,CAA5C;AAAA,CAAvB;;AAEP;;;;;;;;;;;AAWO,IAAMC,oDAAsB,SAAtBA,mBAAsB,CAAChB,IAAD,EAAaE,KAAb;AAAA,SAA6BH,UAAUC,IAAV,EAAgBE,KAAhB,EAAuB,CAAvB,EAA0B,iBAAUe,WAApC,CAA7B;AAAA,CAA5B;;AAEP;;;;;;;;;;;AAWO,IAAMC,sDAAuB,SAAvBA,oBAAuB,CAAClB,IAAD,EAAaE,KAAb;AAAA,SAA6BH,UAAUC,IAAV,EAAgBE,KAAhB,EAAuB,CAAvB,EAA0B,iBAAUiB,YAApC,CAA7B;AAAA,CAA7B;;AAEP;;;;;;;;;;;AAWO,IAAMC,8BAAW,SAAXA,QAAW,CAACnB,EAAD;AAAA,SAAyB;AAC/CI,UAAMT,SADyC;AAE/CU,QAAI,IAAIC,IAAJ,EAF2C;AAG/CN;AAH+C,GAAzB;AAAA,CAAjB;;AAMP;;;;;AAKO,IAAMoB,kCAAa,SAAbA,UAAa;AAAA,SAAe;AACvChB,UAAMP,iBADiC;AAEvCQ,QAAI,IAAIC,IAAJ;AAFmC,GAAf;AAAA,CAAnB;;AAKP;;;;;;;;;;;AAWO,IAAMe,0CAAiB,SAAjBA,cAAiB,CAACrB,EAAD;AAAA,SAAyB;AACrDI,UAAMR,gBAD+C;AAErDS,QAAI,IAAIC,IAAJ,EAFiD;AAGrDN;AAHqD,GAAzB;AAAA,CAAvB","file":"drag.js","sourcesContent":["/**\n * @module src/editor/actions/cell/drag\n *\n * awo4tihjaqo4ith\n */\n\n// @flow\nimport type { Action } from '../../types/redux'\nimport type { Cell } from '../../types/editable'\nimport { positions } from '../../const'\n\nexport const CELL_DRAG_HOVER = 'CELL_DRAG_HOVER'\nexport const CELL_DRAG = 'CELL_DRAG'\nexport const CELL_DRAG_CANCEL = 'CELL_DRAG_CANCEL'\nexport const CLEAR_CLEAR_HOVER = 'CLEAR_CLEAR_HOVER'\n\n/**\n * Creates a redux action for when a cell hovers another item.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHover(drag, hover, level, position))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @param {string} position Can be left, right, above, below.\n * @return {Action}\n */\nexport const cellHover = ({ id: drag }: Cell, { id: hover }: Cell, level: number = 0, position: string): Action => ({\n  type: CELL_DRAG_HOVER,\n  ts: new Date(),\n  drag,\n  hover,\n  level,\n  position\n})\n\n/**\n * Creates a redux action for when a cell is hovering another cell on the left.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverLeftOf(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\nexport const cellHoverLeftOf = (drag: Cell, hover: Cell, level: number) => cellHover(drag, hover, level, positions.LEFT_OF)\n\n/**\n * Creates a redux action for when a cell is hovering another cell on the right.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverRightOf(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\nexport const cellHoverRightOf = (drag: Cell, hover: Cell, level: number) => cellHover(drag, hover, level, positions.RIGHT_OF)\n\n/**\n * Creates a redux action for when a cell is hovering another cell above.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverAbove(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\nexport const cellHoverAbove = (drag: Cell, hover: Cell, level: number) => cellHover(drag, hover, level, positions.ABOVE)\n\n/**\n * Creates a redux action for when a cell is hovering another cell below.\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverBelow(drag, hover, level))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @param {number} level Set the level if the dragged cells should hover over an ancestor of hover.\n * @return {Action}\n */\nexport const cellHoverBelow = (drag: Cell, hover: Cell, level: number) => cellHover(drag, hover, level, positions.BELOW)\n\n/**\n * Creates a redux action for when a cell is hovering another cell on the left, but inline (css floating).\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverInlineLeft(drag, hover))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @return {Action}\n */\nexport const cellHoverInlineLeft = (drag: Cell, hover: Cell) => cellHover(drag, hover, 0, positions.INLINE_LEFT)\n\n/**\n * Creates a redux action for when a cell is hovering another cell on the right, but inline (css floating).\n *\n * @example\n * // const store = redux.createStore()\n * store.dispatch(cellHoverInlineRight(drag, hover))\n *\n * @param {Cell} drag The cell that is currently being dragged.\n * @param {Cell} hover The cell that is being hovered by the dragged cell.\n * @return {Action}\n */\nexport const cellHoverInlineRight = (drag: Cell, hover: Cell) => cellHover(drag, hover, 0, positions.INLINE_RIGHT)\n\n/**\n * Creates a redux action for when a cell is being dragged.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(dragCell(cell.id))\n *\n * @param {string} id The id of the cell that is being dragged.\n * @return {Action}\n */\nexport const dragCell = (id: string): Action => ({\n  type: CELL_DRAG,\n  ts: new Date(),\n  id\n})\n\n/**\n * Creates a redux action to clear hover state of all cells.\n *\n * @return {Action}\n */\nexport const clearHover = (): Action => ({\n  type: CLEAR_CLEAR_HOVER,\n  ts: new Date(),\n})\n\n/**\n * Creates a redux action for when cell dragging ends.\n *\n * @example\n * // const store = redux.createStore()\n * // const cell = { id: '1', ... }\n * store.dispatch(cancelCellDrag(cell.id))\n *\n * @param {string} id\n * @return {Action}\n */\nexport const cancelCellDrag = (id: string): Action => ({\n  type: CELL_DRAG_CANCEL,\n  ts: new Date(),\n  id\n})\n"]}