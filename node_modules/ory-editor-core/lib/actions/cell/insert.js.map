{"version":3,"sources":["../../../src/actions/cell/insert.js"],"names":["CELL_INSERT_ABOVE","CELL_INSERT_BELOW","CELL_INSERT_LEFT_OF","CELL_INSERT_RIGHT_OF","CELL_INSERT_INLINE_LEFT","CELL_INSERT_INLINE_RIGHT","gen","c","ret","i","push","v4","insert","type","item","hover","id","inline","hasInlineNeighbour","level","ids","l","ts","Date","length","insertCellBelow","insertCellAbove","insertCellRightOf","insertCellLeftOf","insertCellLeftInline","insertCellRightInline"],"mappings":";;;;;;;AACA;;;;;;AAIO,IAAMA,gDAAoB,mBAA1B;AACA,IAAMC,gDAAoB,mBAA1B;AACA,IAAMC,oDAAsB,qBAA5B;AACA,IAAMC,sDAAuB,sBAA7B;AACA,IAAMC,4DAA0B,yBAAhC;AACA,IAAMC,8DAA2B,0BAAjC;;AAEP,IAAMC,MAAM,SAANA,GAAM,GAAmB;AAAA,MAAlBC,CAAkB,uEAAN,CAAM;;AAC7B,MAAMC,MAAM,EAAZ;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,KAAKF,CAArB,EAAwBE,GAAxB,EAA6B;AAC3BD,QAAIE,IAAJ,CAAS,eAAKC,EAAL,EAAT;AACD;AACD,SAAOH,GAAP;AACD,CAND;;AAQA,IAAMI,SAAS,SAATA,MAAS,CAACC,IAAD;AAAA,SAAkB,UAACC,IAAD,QAAwH;AAAA,QAArGC,KAAqG,QAAzGC,EAAyG;AAAA,QAA9FC,MAA8F,QAA9FA,MAA8F;AAAA,QAAtFC,kBAAsF,QAAtFA,kBAAsF;AAAA,QAA1DC,KAA0D,uEAA1C,CAA0C;AAAA,QAAvCC,GAAuC,uEAAf,EAAe;;AACvJ,QAAIC,IAAIF,KAAR;AACA,YAAQN,IAAR;AACE,WAAKb,iBAAL;AACA,WAAKC,iBAAL;AAAwB;AACtB,cAAI,CAACgB,UAAUC,kBAAX,KAAkCC,QAAQ,CAA9C,EAAiD;AAC/CE,gBAAI,CAAJ;AACD;AACD;AACD;;AAED,WAAKnB,mBAAL;AACA,WAAKC,oBAAL;AAA2B;AACzB,cAAI,CAACc,UAAUC,kBAAX,KAAkCC,QAAQ,CAA9C,EAAiD;AAC/CE,gBAAI,CAAJ;AACD;AACD;AACD;AACD;AAhBF;;AAmBA,WAAQ;AACNR,gBADM;AAENS,UAAI,IAAIC,IAAJ,EAFE;AAGNT,gBAHM;AAINC,kBAJM;AAKNI,aAAOE,CALD;AAMND,WAAKA,IAAII,MAAJ,GAAa,CAAb,GAAiBJ,GAAjB,GAAuBd,IAAI,CAAJ;AANtB,KAAR;AAQD,GA7Bc;AAAA,CAAf;;AA+BA;;;AAGO,IAAMmB,4CAAkBb,OAAOX,iBAAP,CAAxB;;AAEP;;;AAGO,IAAMyB,4CAAkBd,OAAOZ,iBAAP,CAAxB;;AAEP;;;AAGO,IAAM2B,gDAAoBf,OAAOT,oBAAP,CAA1B;;AAEP;;;AAGO,IAAMyB,8CAAmBhB,OAAOV,mBAAP,CAAzB;;AAEP;;;AAGO,IAAM2B,sDAAuBjB,OAAOR,uBAAP,CAA7B;;AAEP;;;AAGO,IAAM0B,wDAAwBlB,OAAOP,wBAAP,CAA9B","file":"insert.js","sourcesContent":["// @flow\nimport uuid from 'uuid'\nimport type { Action } from '../../types/redux'\nimport type { Cell } from '../../types/editable'\n\nexport const CELL_INSERT_ABOVE = 'CELL_INSERT_ABOVE'\nexport const CELL_INSERT_BELOW = 'CELL_INSERT_BELOW'\nexport const CELL_INSERT_LEFT_OF = 'CELL_INSERT_LEFT_OF'\nexport const CELL_INSERT_RIGHT_OF = 'CELL_INSERT_RIGHT_OF'\nexport const CELL_INSERT_INLINE_LEFT = 'CELL_INSERT_INLINE_LEFT'\nexport const CELL_INSERT_INLINE_RIGHT = 'CELL_INSERT_INLINE_RIGHT'\n\nconst gen = (c: number = 1) => {\n  const ret = []\n  for (let i = 0; i <= c; i++) {\n    ret.push(uuid.v4())\n  }\n  return ret\n}\n\nconst insert = (type: string) => (item: Cell, { id: hover, inline, hasInlineNeighbour }: Cell, level: number = 0, ids: Array < string > = []): Action => {\n  let l = level\n  switch (type) {\n    case CELL_INSERT_ABOVE:\n    case CELL_INSERT_BELOW: {\n      if ((inline || hasInlineNeighbour) && level < 1) {\n        l = 1\n      }\n      break\n    }\n\n    case CELL_INSERT_LEFT_OF:\n    case CELL_INSERT_RIGHT_OF: {\n      if ((inline || hasInlineNeighbour) && level < 1) {\n        l = 1\n      }\n      break\n    }\n    default:\n  }\n\n  return ({\n    type,\n    ts: new Date(),\n    item,\n    hover,\n    level: l,\n    ids: ids.length > 0 ? ids : gen(5)\n  })\n}\n\n/**\n * Insert a cell below of the hovering cell.\n */\nexport const insertCellBelow = insert(CELL_INSERT_BELOW)\n\n/**\n * Insert a cell above of the hovering cell.\n */\nexport const insertCellAbove = insert(CELL_INSERT_ABOVE)\n\n/**\n * Insert a cell right of the hovering cell.\n */\nexport const insertCellRightOf = insert(CELL_INSERT_RIGHT_OF)\n\n/**\n * Insert a cell left of the hovering cell.\n */\nexport const insertCellLeftOf = insert(CELL_INSERT_LEFT_OF)\n\n/**\n * Insert a cell inside the hovering cell, on the left.\n */\nexport const insertCellLeftInline = insert(CELL_INSERT_INLINE_LEFT)\n\n/**\n * Insert a cell inside the hovering cell, on the right.\n */\nexport const insertCellRightInline = insert(CELL_INSERT_INLINE_RIGHT)\n"]}