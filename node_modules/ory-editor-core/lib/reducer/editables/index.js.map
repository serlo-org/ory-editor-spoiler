{"version":3,"sources":["../../../src/reducer/editables/index.js"],"names":["inner","state","action","type","map","e","filter","neverSkipReducer","editables","past","present","future","id","editable"],"mappings":";;;;;;;AACA;;AACA;;;;AAEA;;AACA;;AAEA;;AACA;;AACA;;;;;;AASA,IAAI,oBAAJ,EAAmB;AACjB,kBAAI,IAAJ;AACD;;AAED,IAAMA,QAAQ,yBAAS,YAIL;AAAA,MAJMC,KAIN,uEAJ+B,EAI/B;AAAA,MAJmCC,MAInC;;AAChB,UAAQA,OAAOC,IAAf;AACE;AACE,aAAOF,MAAMG,GAAN,CAAU,UAACC,CAAD;AAAA,eAAiB,wBAASA,CAAT,EAAYH,MAAZ,CAAjB;AAAA,OAAV,CAAP;AAFJ;AAID,CATa,EASX;AACDI,UAAQ,8BAAc,+QAAd,CADP;AAMD;AACAC,oBAAkB;AAPjB,CATW,CAAd;;AAmBO,IAAMC,gCAAY,SAAZA,SAAY,GAAkH;AAAA,MAAjHP,KAAiH,uEAA1D,EAAEQ,MAAM,EAAR,EAAYC,SAAS,EAArB,EAAyBC,QAAQ,EAAjC,EAA0D;AAAA,MAAnBT,MAAmB;AAAA,oBACxFD,KADwF,CACjIQ,IADiI;AAAA,MACjIA,IADiI,+BAC1H,EAD0H;AAAA,uBACxFR,KADwF,CACtHS,OADsH;AAAA,MACtHA,OADsH,kCAC5G,EAD4G;AAAA,sBACxFT,KADwF,CACxGU,MADwG;AAAA,MACxGA,MADwG,iCAC/F,EAD+F;;AAEzI,UAAQT,OAAOC,IAAf;AACE;AACE,aAAOH,MAAM;AACXS,cAAMA,KAAKL,GAAL,CAAS,UAACI,SAAD;AAAA,8CACVA,UAAUF,MAAV,CAAiB;AAAA,gBAAGM,EAAH,QAAGA,EAAH;AAAA,mBAA+BA,OAAOV,OAAOU,EAA7C;AAAA,WAAjB,CADU;AAEb;AACA;AACA;AACA,kCAASV,OAAOW,QAAhB,EAA0BX,MAA1B,CALa;AAAA,SAAT,CADK;AAQXQ,iBAASV,mCACJU,QAAQJ,MAAR,CAAe;AAAA,cAAGM,EAAH,SAAGA,EAAH;AAAA,iBAA+BA,OAAOV,OAAOU,EAA7C;AAAA,SAAf,CADI;AAEP;AACA;AACA,gCAASV,OAAOW,QAAhB,EAA0BX,MAA1B,CAJO,GARE;AAcXS;AAdW,OAAN,CAAP;AAgBF;AACE,aAAOX,MAAMC,KAAN,EAAaC,MAAb,CAAP;AAnBJ;AAqBD,CAvBM","file":"index.js","sourcesContent":["// @flow\nimport { set } from 'redux-undo/lib/debug'\nimport undoable, { includeAction } from 'redux-undo'\n\nimport { editable } from '../editable'\nimport { UPDATE_EDITABLE } from '../../actions/editables'\nimport type { Editable } from '../../types/editable'\nimport { CELL_UPDATE_CONTENT, CELL_UPDATE_LAYOUT, CELL_REMOVE, CELL_RESIZE } from '../../actions/cell/core'\nimport { isProduction } from '../../const'\nimport {\n  CELL_INSERT_ABOVE,\nCELL_INSERT_BELOW,\nCELL_INSERT_LEFT_OF,\nCELL_INSERT_RIGHT_OF,\nCELL_INSERT_INLINE_LEFT,\nCELL_INSERT_INLINE_RIGHT\n} from '../../actions/cell/insert'\n\nif (!isProduction) {\n  set(true)\n}\n\nconst inner = undoable((state: Array<Editable> = [], action: {\n  type: string,\n  id: string,\n  editable: Editable\n}): Editable[] => {\n  switch (action.type) {\n    default:\n      return state.map((e: Editable) => editable(e, action))\n  }\n}, {\n  filter: includeAction([\n    CELL_UPDATE_CONTENT, CELL_UPDATE_LAYOUT, CELL_REMOVE, CELL_RESIZE,\n    CELL_INSERT_ABOVE, CELL_INSERT_BELOW, CELL_INSERT_LEFT_OF, CELL_INSERT_RIGHT_OF,\n    CELL_INSERT_INLINE_LEFT, CELL_INSERT_INLINE_RIGHT\n  ]),\n  // initTypes: [UPDATE_EDITABLE],\n  neverSkipReducer: true\n})\n\nexport const editables = (state: { past: [], present: Editable[], future: [] } = { past: [], present: [], future: [] }, action: Object) => {\n  const { past = [], present = [], future = [] } = state\n  switch (action.type) {\n    case UPDATE_EDITABLE:\n      return inner({\n        past: past.map((editables: Editable[]) => [\n          ...editables.filter(({ id }: Editable): boolean => id !== action.id),\n          // we need to run the rawreducer once or the history initial state will be inconsistent.\n          // resolves https://github.com/ory-am/editor/pull/117#issuecomment-242942796\n          // ...past,\n          editable(action.editable, action)\n        ]),\n        present: inner([\n          ...present.filter(({ id }: Editable): boolean => id !== action.id),\n          // we need to run the rawreducer once or the history initial state will be inconsistent.\n          // resolves https://github.com/ory-am/editor/pull/117#issuecomment-242942796\n          editable(action.editable, action)\n        ]),\n        future\n      })\n    default:\n      return inner(state, action)\n  }\n}\n"]}