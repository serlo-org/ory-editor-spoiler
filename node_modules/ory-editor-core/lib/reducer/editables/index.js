'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editables = undefined;

var _debug = require('redux-undo/lib/debug');

var _reduxUndo = require('redux-undo');

var _reduxUndo2 = _interopRequireDefault(_reduxUndo);

var _editable = require('../editable');

var _editables = require('../../actions/editables');

var _core = require('../../actions/cell/core');

var _const = require('../../const');

var _insert = require('../../actions/cell/insert');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

if (!_const.isProduction) {
  (0, _debug.set)(true);
}

var inner = (0, _reduxUndo2.default)(function () {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];

  switch (action.type) {
    default:
      return state.map(function (e) {
        return (0, _editable.editable)(e, action);
      });
  }
}, {
  filter: (0, _reduxUndo.includeAction)([_core.CELL_UPDATE_CONTENT, _core.CELL_UPDATE_LAYOUT, _core.CELL_REMOVE, _core.CELL_RESIZE, _insert.CELL_INSERT_ABOVE, _insert.CELL_INSERT_BELOW, _insert.CELL_INSERT_LEFT_OF, _insert.CELL_INSERT_RIGHT_OF, _insert.CELL_INSERT_INLINE_LEFT, _insert.CELL_INSERT_INLINE_RIGHT]),
  // initTypes: [UPDATE_EDITABLE],
  neverSkipReducer: true
});

var editables = exports.editables = function editables() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { past: [], present: [], future: [] };
  var action = arguments[1];
  var _state$past = state.past,
      past = _state$past === undefined ? [] : _state$past,
      _state$present = state.present,
      present = _state$present === undefined ? [] : _state$present,
      _state$future = state.future,
      future = _state$future === undefined ? [] : _state$future;

  switch (action.type) {
    case _editables.UPDATE_EDITABLE:
      return inner({
        past: past.map(function (editables) {
          return [].concat(_toConsumableArray(editables.filter(function (_ref) {
            var id = _ref.id;
            return id !== action.id;
          })), [
          // we need to run the rawreducer once or the history initial state will be inconsistent.
          // resolves https://github.com/ory-am/editor/pull/117#issuecomment-242942796
          // ...past,
          (0, _editable.editable)(action.editable, action)]);
        }),
        present: inner([].concat(_toConsumableArray(present.filter(function (_ref2) {
          var id = _ref2.id;
          return id !== action.id;
        })), [
        // we need to run the rawreducer once or the history initial state will be inconsistent.
        // resolves https://github.com/ory-am/editor/pull/117#issuecomment-242942796
        (0, _editable.editable)(action.editable, action)])),
        future: future
      });
    default:
      return inner(state, action);
  }
};
//# sourceMappingURL=index.js.map