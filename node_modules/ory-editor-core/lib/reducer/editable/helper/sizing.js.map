{"version":3,"sources":["../../../../src/reducer/editable/helper/sizing.js"],"names":["MAX_CELLS_PER_ROW","sumSizes","cells","reduce","size","p","a","inline","c","b","computeBounds","map","k","bounds","left","right","length","computeResizeable","resizable","computeInlines","hasInlineNeighbour","Math","round","id","resizeCells","prev","ret","computeSizes","total","count","sizePerCell","floor","spaceLeft"],"mappings":"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","file":"sizing.js","sourcesContent":["// @flow\nimport type { Cell } from '../../../types/editable'\n\nconst MAX_CELLS_PER_ROW = 12\n\n/**\n * Sum up cell sizes: Î£(cell[size]).\n */\nexport const sumSizes = (cells: Array < Cell > = []): number =>\n  cells.reduce(({ size: p = 99, inline: a }: any, { size: c = 99, inline: b }: any) =>\n    ({ size: ((a ? 0 : 1) * p) + ((b ? 0 : 1) * c) }), { size: 0 }).size\n\n/**\n * Updates each cell's size boundaries.\n */\nexport const computeBounds = (cells: Array < Cell > = []): Array<Cell> => cells.map((c: Cell, k: number): Cell => ({\n  ...c,\n  bounds: {\n    left: k > 0 ? cells[k - 1].size + c.size - 1 : 0,\n    right: k === cells.length - 1 ? 0 : c.size - 1 + cells[k + 1].size\n  }\n}))\n\n/**\n * Computes if a cell is resizable.\n */\nexport const computeResizeable = (cells: Array < Cell > = []): Array<Cell> => cells.map((c: Cell, k: number): Cell => ({\n  ...c,\n  resizable: cells.length > 1 && k !== cells.length - 1\n}))\n\n/**\n * Computes sizes an inline element was found.\n */\nexport const computeInlines = (cells: Array < Cell > = []): Array<Cell> => {\n  if (cells.length !== 2 || !cells[0].inline) {\n    return cells.map((c: Cell) => ({ ...c, inline: null, hasInlineNeighbour: null }))\n  }\n\n  const inline = cells[0].inline\n  return [{\n    ...cells[0],\n    resizable: true,\n    size: cells[0].size || Math.round(MAX_CELLS_PER_ROW / 2),\n    bounds: {\n      left: inline === 'left' ? 0 : MAX_CELLS_PER_ROW - 1,\n      right: inline === 'right' ? 0 : MAX_CELLS_PER_ROW - 1\n    }\n  }, {\n    ...cells[1], bounds: { left: 0, right: 0 }, size: 12, hasInlineNeighbour: cells[0].id\n  }]\n}\n\n/**\n * Resize cells.\n */\nexport const resizeCells = (cells: Array < Cell > = [], { id, size }: Cell): Array<Cell> => {\n  let prev = 0\n  return cells.map((c: Cell) => {\n    if (prev > 0) {\n      const ret = { ...c, size: c.size + prev - size }\n      prev = 0\n      return ret\n    } else if (id === c.id) {\n      if (!c.inline) {\n        prev = c.size\n      }\n      return { ...c, size }\n    }\n    return c\n  })\n}\n\n/**\n * Balance cell sizes.\n *\n * @param {[...cell]} cells\n * @return {[...cell]}\n */\nexport const computeSizes = (cells: Array < Cell > = []): Array<Cell> => {\n  const total = sumSizes(cells)\n  if (total === MAX_CELLS_PER_ROW) {\n    return cells\n  }\n\n  const count = cells.length\n  const sizePerCell = Math.floor(MAX_CELLS_PER_ROW / count)\n  const spaceLeft = MAX_CELLS_PER_ROW - (sizePerCell * (count - 1))\n  return cells.map((c: Cell, k: number) => ({\n    ...c,\n    size: k === count - 1 ? spaceLeft : sizePerCell\n  }))\n}\n"]}