{"version":3,"sources":["../../../../src/reducer/editable/helper/tree.js"],"names":["decorate","cells","map","cell","rows","r","optimized"],"mappings":";;;;;;;AACA;;AAMA;;AACA;;AAGO,IAAMA,8BAAW,SAAXA,QAAW;AAAA,MAACC,KAAD,uEAAyB,EAAzB;AAAA,SAA6C,4BAAe,+BAAkB,2BAAc,0BAAa,6BAAcA,KAAd,CAAb,CAAd,CAAlB,CAAf,EAAqFC,GAArF,CAAyF,UAACC,IAAD,EAAsB;AAClL,QAAIA,KAAKC,IAAT,EAAe;AACbD,WAAKC,IAAL,GAAY,4BAAaD,KAAKC,IAAlB,EAAwBF,GAAxB,CAA4B,UAACG,CAAD,EAAiB;AACvD,YAAMC,YAAY,2BAAYD,CAAZ,CAAlB;AACA,YAAIC,UAAUL,KAAd,EAAqB;AACnBK,oBAAUL,KAAV,GAAkBD,SAASM,UAAUL,KAAnB,CAAlB;AACD;AACD,eAAOK,SAAP;AACD,OANW,CAAZ;AAOD;;AAED,WAAO,8BAAkB,4BAAaH,IAAb,CAAlB,CAAP;AACD,GAZoE,CAA7C;AAAA,CAAjB","file":"tree.js","sourcesContent":["// @flow\nimport {\n  computeSizes,\n  computeInlines,\n  computeBounds,\n  computeResizeable\n} from './sizing'\nimport { optimizeCell, optimizeRow, optimizeRows, optimizeCells } from './optimize'\nimport { computeDropLevels } from './level'\nimport type { Cell, Row } from '../../../types/editable'\n\nexport const decorate = (cells: Array < Cell > = []): Array<Cell> => computeInlines(computeResizeable(computeBounds(computeSizes(optimizeCells(cells))))).map((cell: Cell): Cell => {\n  if (cell.rows) {\n    cell.rows = optimizeRows(cell.rows).map((r: Row): Row => {\n      const optimized = optimizeRow(r)\n      if (optimized.cells) {\n        optimized.cells = decorate(optimized.cells)\n      }\n      return optimized\n    })\n  }\n\n  return computeDropLevels(optimizeCell(cell))\n})\n"]}