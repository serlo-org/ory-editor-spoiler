'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.optimizeRow = exports.optimizeCell = exports.optimizeRows = exports.optimizeCells = exports.flatten = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _empty = require('./empty');

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var flatten = exports.flatten = function flatten(c, n) {
  return [].concat(_toConsumableArray(c), _toConsumableArray(n));
};

var optimizeCells = exports.optimizeCells = function optimizeCells() {
  var cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return cells.filter(_empty.emptyFilter);
};

var optimizeRows = exports.optimizeRows = function optimizeRows() {
  var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return rows.filter(_empty.emptyFilter);
};

var optimizeCell = function optimizeCell(_ref) {
  var rows = _ref.rows,
      other = _objectWithoutProperties(_ref, ['rows']);

  return _extends({}, other, {
    rows: (rows || []).map(function (r) {
      var _r$cells = r.cells,
          cells = _r$cells === undefined ? [] : _r$cells;

      if (cells.length !== 1) {
        return [r];
      }

      var _cells$ = cells[0],
          _cells$$rows = _cells$.rows,
          cellRows = _cells$$rows === undefined ? [] : _cells$$rows,
          layout = _cells$.layout;

      if (cellRows.length > 0 && !layout) {
        return cellRows;
      }
      return [r];
    }).reduce(flatten, [])
  });
};

exports.optimizeCell = optimizeCell;
var optimizeRow = function optimizeRow(_ref2) {
  var cells = _ref2.cells,
      other = _objectWithoutProperties(_ref2, ['cells']);

  return _extends({}, other, {
    cells: (cells || []).map(function (c) {
      var _c$rows = c.rows,
          rows = _c$rows === undefined ? [] : _c$rows;

      if (rows.length !== 1 || c.layout) {
        return [c];
      }

      var _rows$0$cells = rows[0].cells,
          rowCells = _rows$0$cells === undefined ? [] : _rows$0$cells;

      if (rowCells.length === 1) {
        return rowCells;
      }

      return [c];
    }).reduce(flatten, [])
  });
};
exports.optimizeRow = optimizeRow;
//# sourceMappingURL=optimize.js.map