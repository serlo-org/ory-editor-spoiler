{"version":3,"sources":["../../../../src/reducer/editable/helper/level.js"],"names":["computeRowLevels","a","b","cells","props","left","right","above","below","length","map","c","k","computeCellLevels","levels","rows","r","computeDropLevels"],"mappings":";;;;;;;;;;AACA;AAKA,IAAMA,mBAAmB,SAAnBA,gBAAmB,CAACC,CAAD,EAASC,CAAT,EAA6B;AAAA,aACnBD,KAAK,EADc;AAAA,wBAC5CE,KAD4C;AAAA,MAC5CA,KAD4C,8BACpC,EADoC;AAAA,MAC7BC,KAD6B;;AAAA,cAEEF,KAAK,EAFP;AAAA,yBAE5CG,IAF4C;AAAA,MAE5CA,IAF4C,8BAErC,CAFqC;AAAA,0BAElCC,KAFkC;AAAA,MAElCA,KAFkC,+BAE1B,CAF0B;AAAA,0BAEvBC,KAFuB;AAAA,MAEvBA,KAFuB,+BAEf,CAFe;AAAA,0BAEZC,KAFY;AAAA,MAEZA,KAFY,+BAEJ,CAFI;;AAIpD,MAAIL,MAAMM,MAAV,EAAkB;AAChBL,UAAMD,KAAN,GAAcA,MAAMO,GAAN,CAAU,UAACC,CAAD,EAAUC,CAAV;AAAA,aAAwBC,kBAAkBF,CAAlB,EAAqB;AACnEN,cAAMO,MAAM,CAAN,GAAUP,OAAO,CAAjB,GAAqB,CADwC;AAEnEC,eAAOM,MAAMT,MAAMM,MAAN,GAAe,CAArB,GAAyBH,QAAQ,CAAjC,GAAqC,CAFuB;AAGnEC,eAAOA,QAAQ,CAHoD;AAInEC,eAAOA,QAAQ;AAJoD,OAArB,CAAxB;AAAA,KAAV,CAAd;AAMD;;AAED,SAAOJ,MAAMU,MAAb,CAboD,CAahC;AACpB,oBAASA,QAAQ,EAAET,UAAF,EAAQC,YAAR,EAAeC,YAAf,EAAsBC,YAAtB,EAAjB,IAAmDJ,KAAnD;AACD,CAfD;;AAiBA,IAAMS,oBAAoB,SAApBA,iBAAoB,CAACZ,CAAD,EAAUC,CAAV,EAA+B;AAAA,cACvBD,KAAK,EADkB;AAAA,yBAC/Cc,IAD+C;AAAA,MAC/CA,IAD+C,8BACxC,EADwC;AAAA,MACjCX,KADiC;;AAAA,cAEDF,KAAK,EAFJ;AAAA,yBAE/CG,IAF+C;AAAA,MAE/CA,IAF+C,8BAExC,CAFwC;AAAA,0BAErCC,KAFqC;AAAA,MAErCA,KAFqC,+BAE7B,CAF6B;AAAA,0BAE1BC,KAF0B;AAAA,MAE1BA,KAF0B,+BAElB,CAFkB;AAAA,0BAEfC,KAFe;AAAA,MAEfA,KAFe,+BAEP,CAFO;;AAIvD,MAAIO,KAAKN,MAAT,EAAiB;AACfL,UAAMW,IAAN,GAAaA,KAAKL,GAAL,CAAS,UAACM,CAAD,EAASJ,CAAT;AAAA,aAAuBZ,iBAAiBgB,CAAjB,EAAoB;AAC/DX,cAAMA,OAAO,CADkD;AAE/DC,eAAOA,QAAQ,CAFgD;AAG/DC,eAAOK,MAAM,CAAN,GAAUL,QAAQ,CAAlB,GAAsB,CAHkC;AAI/DC,eAAOI,MAAMG,KAAKN,MAAL,GAAc,CAApB,GAAwBD,QAAQ,CAAhC,GAAoC;AAJoB,OAApB,CAAvB;AAAA,KAAT,CAAb;AAMD;;AAED,SAAOJ,MAAMU,MAAb,CAbuD,CAanC;AACpB,oBAASA,QAAQ,EAAET,UAAF,EAAQC,YAAR,EAAeC,YAAf,EAAsBC,YAAtB,EAAjB,IAAmDJ,KAAnD;AACD,CAfD;;AAiBO,IAAMa,gDAAoB,SAApBA,iBAAoB,CAACN,CAAD;AAAA,SAAmBE,kBAAkBF,CAAlB,CAAnB;AAAA,CAA1B","file":"level.js","sourcesContent":["// @flow\n/* eslint no-use-before-define: \"off\" */\nimport type { Cell, Row } from '../../../types/editable'\n\ntype Levels = { left: number, right: number, above: number, below: number }\n\nconst computeRowLevels = (a: Row, b: ?Levels): Row => {\n  const { cells = [], ...props } = a || {}\n  const { left = 0, right = 0, above = 0, below = 0 } = b || {}\n\n  if (cells.length) {\n    props.cells = cells.map((c: Cell, k: number) => computeCellLevels(c, {\n      left: k === 0 ? left + 1 : 0,\n      right: k === cells.length - 1 ? right + 1 : 0,\n      above: above + 1,\n      below: below + 1\n    }))\n  }\n\n  delete props.levels // eslint-disable-line prefer-reflect\n  return { levels: { left, right, above, below }, ...props }\n}\n\nconst computeCellLevels = (a: Cell, b: ?Levels): Cell => {\n  const { rows = [], ...props } = a || {}\n  const { left = 0, right = 0, above = 0, below = 0 } = b || {}\n\n  if (rows.length) {\n    props.rows = rows.map((r: Row, k: number) => computeRowLevels(r, {\n      left: left + 1,\n      right: right + 1,\n      above: k === 0 ? above + 1 : 0,\n      below: k === rows.length - 1 ? below + 1 : 0\n    }))\n  }\n\n  delete props.levels // eslint-disable-line prefer-reflect\n  return { levels: { left, right, above, below }, ...props }\n}\n\nexport const computeDropLevels = (c: Cell): Cell => computeCellLevels(c)\n"]}