'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeDecorator = exports.splitRows = exports.mergeRows = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); // '


var _flatten = require('ramda/src/flatten');

var _flatten2 = _interopRequireDefault(_flatten);

var _head = require('ramda/src/head');

var _head2 = _interopRequireDefault(_head);

var _path = require('ramda/src/path');

var _path2 = _interopRequireDefault(_path);

var _map = require('ramda/src/map');

var _map2 = _interopRequireDefault(_map);

var _reduce3 = require('ramda/src/reduce');

var _reduce4 = _interopRequireDefault(_reduce3);

var _tail = require('ramda/src/tail');

var _tail2 = _interopRequireDefault(_tail);

var _takeWhile = require('ramda/src/takeWhile');

var _takeWhile2 = _interopRequireDefault(_takeWhile);

var _display = require('../../../actions/display');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var notSharp = function notSharp(c) {
  return c !== '#';
};

var mergeRows = exports.mergeRows = function mergeRows(state) {
  if (state.length < 2) {
    return state;
  }

  var _reduce = (0, _reduce4.default)(function (_ref, rowB) {
    var _ref2 = _slicedToArray(_ref, 2),
        rowsAcc = _ref2[0],
        rowA = _ref2[1];

    var numberOfCells = (0, _path2.default)(['cells', 'length']);

    if (numberOfCells(rowA) !== 1 || numberOfCells(rowB) !== 1) {
      return [[].concat(_toConsumableArray(rowsAcc), [_extends({}, rowA, { id: (0, _takeWhile2.default)(notSharp, rowA.id).join('') })]), rowB];
    }

    var cellA = rowA.cells[0];
    var cellB = rowB.cells[0];

    var pluginName = (0, _path2.default)(['content', 'plugin', 'name']);
    var pluginVersion = (0, _path2.default)(['content', 'plugin', 'version']);
    var pluginMerge = (0, _path2.default)(['content', 'plugin', 'merge']);

    if (!pluginName(cellA) || !pluginName(cellB) || !pluginVersion(cellA) || !pluginVersion(cellB) || pluginName(cellA) !== pluginName(cellB) || pluginVersion(cellA) !== pluginVersion(cellB) || !pluginMerge(cellA)) {
      return [[].concat(_toConsumableArray(rowsAcc), [_extends({}, rowA, { id: (0, _takeWhile2.default)(notSharp, rowA.id).join('') })]), rowB];
    }

    return [rowsAcc, _extends({}, rowA, {
      id: (0, _takeWhile2.default)(notSharp, rowA.id).join(''),
      cells: [_extends({}, cellA, {
        id: (0, _takeWhile2.default)(notSharp, cellA.id).join(''),
        content: _extends({}, cellA.content, {
          state: pluginMerge(cellA)([cellA.content.state, cellB.content.state])
        })
      })]
    })];
  }, [[], (0, _head2.default)(state)], (0, _tail2.default)(state)),
      _reduce2 = _slicedToArray(_reduce, 2),
      newCellsAcc = _reduce2[0],
      lastRow = _reduce2[1];

  return [].concat(_toConsumableArray(newCellsAcc), [lastRow]);
};

var splitRows = exports.splitRows = function splitRows(state) {
  return (0, _flatten2.default)((0, _map2.default)(function (row) {
    if (!row.cells) {
      return [row];
    }

    if (row.cells.length !== 1) {
      return [row];
    }

    var state = (0, _path2.default)(['cells', 0, 'content', 'state'], row);
    var split = (0, _path2.default)(['cells', 0, 'content', 'plugin', 'split'], row);

    if (!split) {
      return [row];
    }

    return split(state).map(function (state, i) {
      return _extends({}, row, {
        id: row.id + '#' + i,
        cells: [_extends({}, row.cells[0], {
          id: row.cells[0].id + '#' + i,
          content: _extends({}, row.cells[0].content, {
            state: state
          })
        })]
      });
    });
  }, state));
};

var mergeDecorator = exports.mergeDecorator = function mergeDecorator(action) {
  return function (state) {
    if (action.type !== _display.SET_DISPLAY_MODE) {
      return state;
    }

    switch (action.mode) {
      case 'edit':
        return mergeRows(state);
      case 'insert':
      case 'layout':
        {
          return splitRows(state);
        }
      default:
        return state;
    }
  };
};
//# sourceMappingURL=merge.js.map