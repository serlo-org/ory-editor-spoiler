'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var MAX_CELLS_PER_ROW = 12;

/**
 * Sum up cell sizes: Î£(cell[size]).
 */

var sumSizes = exports.sumSizes = function sumSizes() {
  var cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return cells.reduce(function (_ref, _ref2) {
    var _ref$size = _ref.size,
        p = _ref$size === undefined ? 99 : _ref$size,
        a = _ref.inline;
    var _ref2$size = _ref2.size,
        c = _ref2$size === undefined ? 99 : _ref2$size,
        b = _ref2.inline;
    return { size: (a ? 0 : 1) * p + (b ? 0 : 1) * c };
  }, { size: 0 }).size;
};

/**
 * Updates each cell's size boundaries.
 */
var computeBounds = exports.computeBounds = function computeBounds() {
  var cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return cells.map(function (c, k) {
    return _extends({}, c, {
      bounds: {
        left: k > 0 ? cells[k - 1].size + c.size - 1 : 0,
        right: k === cells.length - 1 ? 0 : c.size - 1 + cells[k + 1].size
      }
    });
  });
};

/**
 * Computes if a cell is resizable.
 */
var computeResizeable = exports.computeResizeable = function computeResizeable() {
  var cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return cells.map(function (c, k) {
    return _extends({}, c, {
      resizable: cells.length > 1 && k !== cells.length - 1
    });
  });
};

/**
 * Computes sizes an inline element was found.
 */
var computeInlines = exports.computeInlines = function computeInlines() {
  var cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  if (cells.length !== 2 || !cells[0].inline) {
    return cells.map(function (c) {
      return _extends({}, c, { inline: null, hasInlineNeighbour: null });
    });
  }

  var inline = cells[0].inline;
  return [_extends({}, cells[0], {
    resizable: true,
    size: cells[0].size || Math.round(MAX_CELLS_PER_ROW / 2),
    bounds: {
      left: inline === 'left' ? 0 : MAX_CELLS_PER_ROW - 1,
      right: inline === 'right' ? 0 : MAX_CELLS_PER_ROW - 1
    }
  }), _extends({}, cells[1], { bounds: { left: 0, right: 0 }, size: 12, hasInlineNeighbour: cells[0].id
  })];
};

/**
 * Resize cells.
 */
var resizeCells = exports.resizeCells = function resizeCells() {
  var cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var _ref3 = arguments[1];
  var id = _ref3.id,
      size = _ref3.size;

  var prev = 0;
  return cells.map(function (c) {
    if (prev > 0) {
      var ret = _extends({}, c, { size: c.size + prev - size });
      prev = 0;
      return ret;
    } else if (id === c.id) {
      if (!c.inline) {
        prev = c.size;
      }
      return _extends({}, c, { size: size });
    }
    return c;
  });
};

/**
 * Balance cell sizes.
 *
 * @param {[...cell]} cells
 * @return {[...cell]}
 */
var computeSizes = exports.computeSizes = function computeSizes() {
  var cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var total = sumSizes(cells);
  if (total === MAX_CELLS_PER_ROW) {
    return cells;
  }

  var count = cells.length;
  var sizePerCell = Math.floor(MAX_CELLS_PER_ROW / count);
  var spaceLeft = MAX_CELLS_PER_ROW - sizePerCell * (count - 1);
  return cells.map(function (c, k) {
    return _extends({}, c, {
      size: k === count - 1 ? spaceLeft : sizePerCell
    });
  });
};
//# sourceMappingURL=sizing.js.map