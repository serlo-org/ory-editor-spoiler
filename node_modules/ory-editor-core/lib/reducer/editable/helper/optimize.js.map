{"version":3,"sources":["../../../../src/reducer/editable/helper/optimize.js"],"names":["flatten","c","n","optimizeCells","cells","filter","optimizeRows","rows","optimizeCell","other","map","r","length","cellRows","layout","reduce","optimizeRow","rowCells"],"mappings":";;;;;;;;;AACA;;;;;;AAGO,IAAMA,4BAAU,SAAVA,OAAU,CAAcC,CAAd,EAA2BC,CAA3B,EAAkD;AACvE,sCAAYD,CAAZ,sBAAkBC,CAAlB;AACD,CAFM;;AAIA,IAAMC,wCAAgB,SAAhBA,aAAgB;AAAA,MAACC,KAAD,uEAAyB,EAAzB;AAAA,SAA6CA,MAAMC,MAAN,oBAA7C;AAAA,CAAtB;;AAEA,IAAMC,sCAAe,SAAfA,YAAe;AAAA,MAACC,IAAD,uEAAuB,EAAvB;AAAA,SAA0CA,KAAKF,MAAL,oBAA1C;AAAA,CAArB;;AAEA,IAAMG,eAAe,SAAfA,YAAe;AAAA,MAAGD,IAAH,QAAGA,IAAH;AAAA,MAAYE,KAAZ;;AAAA,sBACvBA,KADuB;AAE1BF,UAAM,CAACA,QAAQ,EAAT,EAAaG,GAAb,CAAiB,UAACC,CAAD,EAAwB;AAAA,qBACtBA,CADsB,CACrCP,KADqC;AAAA,UACrCA,KADqC,4BAC7B,EAD6B;;AAE7C,UAAIA,MAAMQ,MAAN,KAAiB,CAArB,EAAwB;AACtB,eAAO,CAACD,CAAD,CAAP;AACD;;AAJ4C,oBAMCP,MAAM,CAAN,CAND;AAAA,iCAMrCG,IANqC;AAAA,UAM/BM,QAN+B,gCAMpB,EANoB;AAAA,UAMhBC,MANgB,WAMhBA,MANgB;;AAO7C,UAAID,SAASD,MAAT,GAAkB,CAAlB,IAAuB,CAACE,MAA5B,EAAoC;AAClC,eAAOD,QAAP;AACD;AACD,aAAO,CAACF,CAAD,CAAP;AACD,KAXK,EAWHI,MAXG,CAWIf,OAXJ,EAWa,EAXb;AAFoB;AAAA,CAArB;;;AAgBA,IAAMgB,cAAc,SAAdA,WAAc;AAAA,MAAGZ,KAAH,SAAGA,KAAH;AAAA,MAAaK,KAAb;;AAAA,sBACtBA,KADsB;AAEzBL,WAAO,CAACA,SAAS,EAAV,EAAcM,GAAd,CAAkB,UAACT,CAAD,EAAa;AAAA,oBACdA,CADc,CAC5BM,IAD4B;AAAA,UAC5BA,IAD4B,2BACrB,EADqB;;AAEpC,UAAIA,KAAKK,MAAL,KAAgB,CAAhB,IAAqBX,EAAEa,MAA3B,EAAmC;AACjC,eAAO,CAACb,CAAD,CAAP;AACD;;AAJmC,0BAMEM,KAAK,CAAL,CANF,CAM5BH,KAN4B;AAAA,UAMrBa,QANqB,iCAMV,EANU;;AAOpC,UAAIA,SAASL,MAAT,KAAoB,CAAxB,EAA2B;AACzB,eAAOK,QAAP;AACD;;AAED,aAAO,CAAChB,CAAD,CAAP;AACD,KAZM,EAYJc,MAZI,CAYGf,OAZH,EAYY,EAZZ;AAFkB;AAAA,CAApB","file":"optimize.js","sourcesContent":["// @flow\nimport { emptyFilter } from './empty'\nimport type { Row, Cell } from '../../../types/editable'\n\nexport const flatten = function <T> (c: Array<T>, n: Array<T>): Array<T> {\n  return ([...c, ...n])\n}\n\nexport const optimizeCells = (cells: Array < Cell > = []): Array<Cell> => cells.filter(emptyFilter)\n\nexport const optimizeRows = (rows: Array < Row > = []): Array<Row> => rows.filter(emptyFilter)\n\nexport const optimizeCell = ({ rows, ...other }: Cell): Cell => ({\n  ...other,\n  rows: (rows || []).map((r: Row): Array<Row> => {\n    const { cells = [] } = r\n    if (cells.length !== 1) {\n      return [r]\n    }\n\n    const { rows: cellRows = [], layout }: Cell = cells[0]\n    if (cellRows.length > 0 && !layout) {\n      return cellRows\n    }\n    return [r]\n  }).reduce(flatten, [])\n})\n\nexport const optimizeRow = ({ cells, ...other }: Row): Row => ({\n  ...other,\n  cells: (cells || []).map((c: Cell) => {\n    const { rows = [] } = c\n    if (rows.length !== 1 || c.layout) {\n      return [c]\n    }\n\n    const { cells: rowCells = [] }: Row = rows[0]\n    if (rowCells.length === 1) {\n      return rowCells\n    }\n\n    return [c]\n  }).reduce(flatten, [])\n})\n"]}