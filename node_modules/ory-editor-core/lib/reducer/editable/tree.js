'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rows = exports.row = exports.cells = exports.cell = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
/* eslint-disable no-use-before-define */
/* eslint no-duplicate-imports: "off" */


var _pathOr = require('ramda/src/pathOr');

var _pathOr2 = _interopRequireDefault(_pathOr);

var _optimize = require('./helper/optimize');

var _merge = require('./helper/merge');

var _hover = require('./helper/hover');

var _sizing = require('./helper/sizing');

var _inline = require('./helper/inline');

var _editable = require('../../types/editable');

var _cell = require('../../actions/cell');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var inner = function inner(cb, action) {
  return function (state) {
    return cb(state, action);
  };
};
var identity = function identity(state) {
  return state;
};

var cell = exports.cell = function cell(state, action) {
  return (0, _optimize.optimizeCell)(function (state, action) {
    var reduce = function reduce() {
      var content = (0, _pathOr2.default)(identity, ['content', 'plugin', 'reducer'], state);
      var layout = (0, _pathOr2.default)(identity, ['content', 'layout', 'reducer'], state);

      return content(layout(_extends({}, state, {
        hover: null,
        rows: rows(state.rows, action)
      }), action), action);
    };

    switch (action.type) {
      case _cell.CELL_UPDATE_CONTENT:
        if (action.id === state.id) {
          // If this cell is being updated, set the data
          var reduced = reduce();
          return _extends({}, reduced, {
            content: _extends({}, state.content || {}, {
              state: _extends({}, (0, _pathOr2.default)({}, ['content', 'state'], reduced), action.state)
            })
          });
        }
        return reduce();

      case _cell.CELL_UPDATE_LAYOUT:
        if (action.id === state.id) {
          // If this cell is being updated, set the data
          var _reduced = reduce();
          return _extends({}, _reduced, {
            layout: _extends({}, state.layout || {}, {
              state: _extends({}, (0, _pathOr2.default)({}, ['layout', 'state'], _reduced), action.state)
            })
          });
        }
        return reduce();

      case _cell.CELL_FOCUS:
        if (action.id === state.id) {
          // If this cell is being focused, set the data
          return _extends({}, reduce(), { focused: true, focusSource: action.source });
        }
        return _extends({}, reduce(), { focused: false, focusSource: null });

      case _cell.CELL_BLUR:
        if (action.id === state.id) {
          // If this cell is being blurred, set the data
          return _extends({}, reduce(), { focused: false, focusSource: null });
        }
        return reduce();

      case _cell.CELL_BLUR_ALL:
        return _extends({}, reduce(), { focused: false });

      case _cell.CELL_DRAG_HOVER:
        if ((0, _hover.isHoveringThis)(state, action)) {
          // if this is the cell we're hovering, set the hover attribute
          return _extends({}, reduce(), { hover: action.position });
        }
        // or remove it if not
        return reduce();

      case _cell.CELL_INSERT_ABOVE:
        if ((0, _hover.isHoveringThis)(state, action)) {
          return _extends({}, (0, _editable.createCell)(), {
            id: action.ids[0],
            hover: null,
            rows: rows([_extends({}, (0, _editable.createRow)(), {
              id: action.ids[1],
              cells: [_extends({}, action.item, { id: action.ids[2], inline: null })]
            }), _extends({}, (0, _editable.createRow)(), {
              id: action.ids[3],
              cells: [_extends({}, reduce(), { id: action.ids[4] })]
            })], _extends({}, action, { hover: null }))
          });
        }
        return reduce();

      case _cell.CELL_INSERT_BELOW:
        if ((0, _hover.isHoveringThis)(state, action)) {
          return _extends({}, (0, _editable.createCell)(), {
            id: action.ids[0],
            hover: null,
            rows: rows([_extends({}, (0, _editable.createRow)(), {
              id: action.ids[1],
              cells: [_extends({}, reduce(), { id: action.ids[2] })]
            }), _extends({}, (0, _editable.createRow)(), {
              id: action.ids[3],
              cells: [_extends({}, action.item, { id: action.ids[4], inline: null })]
            })], _extends({}, action, { hover: null }))
          });
        }
        return reduce();

      default:
        return reduce();
    }
  }(state, action));
};

var cells = exports.cells = function cells() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];
  return (0, _optimize.optimizeCells)(function (state, action) {
    switch (action.type) {
      case _cell.CELL_RESIZE:
        return (0, _sizing.resizeCells)(state.map(inner(cell, action)), action);

      case _cell.CELL_INSERT_BELOW:
      case _cell.CELL_INSERT_ABOVE:
        return state.filter(function (c) {
          return c.id !== action.item.id;
        }).map(inner(cell, action));

      case _cell.CELL_INSERT_LEFT_OF:
        return state.filter(function (c) {
          return c.id !== action.item.id;
        }).map(function (c) {
          return (0, _hover.isHoveringThis)(c, action) ? [_extends({}, action.item, { id: action.ids[0], inline: null }), _extends({}, c, { id: action.ids[1] })] : [c];
        }).reduce(_optimize.flatten, []).map(inner(cell, action));

      case _cell.CELL_INSERT_RIGHT_OF:
        return state.filter(function (c) {
          return c.id !== action.item.id;
        }).map(function (c) {
          return (0, _hover.isHoveringThis)(c, action) ? [_extends({}, c, { id: action.ids[0] }), _extends({}, action.item, { id: action.ids[1], inline: null })] : [c];
        }).reduce(_optimize.flatten, []).map(inner(cell, action));

      case _cell.CELL_INSERT_INLINE_RIGHT:
      case _cell.CELL_INSERT_INLINE_LEFT:
        return state.filter(function (c) {
          return c.id !== action.item.id;
        }).map(function (c) {
          if ((0, _hover.isHoveringThis)(c, action)) {
            return [_extends({}, (0, _editable.createCell)(), {
              id: action.ids[0],
              rows: [_extends({}, (0, _editable.createRow)(), {
                id: action.ids[1],
                cells: [_extends({}, action.item, {
                  inline: action.type === _cell.CELL_INSERT_INLINE_RIGHT ? 'right' : 'left',
                  id: action.ids[2],
                  size: 0
                }), _extends({}, c, { id: action.ids[3], inline: null, hasInlineNeighbour: action.ids[2], size: 0 })]
              })]
            })];
          }
          return [c];
        }).reduce(_optimize.flatten, []).map(inner(cell, action));

      case _cell.CELL_REMOVE:
        return state.filter(function (_ref) {
          var id = _ref.id;
          return id !== action.id;
        }).map(inner(cell, action));

      default:
        return state.map(inner(cell, action));
    }
  }(state, action));
};

var row = exports.row = function row(state, action) {
  return (0, _inline.computeRow)((0, _optimize.optimizeRow)(function (state, action) {
    var reduce = function reduce() {
      return _extends({}, state, {
        hover: null,
        cells: cells(state.cells, action)
      });
    };

    switch (action.type) {
      case _cell.CELL_INSERT_LEFT_OF:
        if (!(0, _hover.isHoveringThis)(state, action)) {
          return reduce();
        }
        return _extends({}, state, {
          hover: null,
          cells: cells([_extends({}, action.item, { id: action.ids[0], inline: null })].concat(_toConsumableArray(state.cells)), _extends({}, action, { hover: null }))
        });

      case _cell.CELL_INSERT_RIGHT_OF:
        if (!(0, _hover.isHoveringThis)(state, action)) {
          return reduce();
        }
        return _extends({}, state, {
          hover: null,
          cells: cells([].concat(_toConsumableArray(state.cells), [_extends({}, action.item, { id: action.ids[0], inline: null })]), _extends({}, action, { hover: null }))
        });

      case _cell.CELL_DRAG_HOVER:
        if ((0, _hover.isHoveringThis)(state, action)) {
          return _extends({}, reduce(), { hover: action.position });
        }
        return reduce();

      default:
        return reduce();
    }
  }(state, action)));
};

var rows = exports.rows = function rows() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];
  return (0, _optimize.optimizeRows)((0, _merge.mergeDecorator)(action)(function (state, action) {
    var reduce = function reduce() {
      return state.map(inner(row, action));
    };
    switch (action.type) {
      case _cell.CELL_INSERT_ABOVE:
        return state.map(function (r) {
          return (0, _hover.isHoveringThis)(r, action) ? [_extends({}, (0, _editable.createRow)(), {
            cells: [_extends({}, action.item, { id: action.ids[1], inline: null })],
            id: action.ids[0]
          }), _extends({}, r, {
            id: action.ids[2]
          })] : [r];
        }).reduce(_optimize.flatten, []).map(inner(row, action));
      case _cell.CELL_INSERT_BELOW:
        return state.map(function (r) {
          return (0, _hover.isHoveringThis)(r, action) ? [_extends({}, r, { id: action.ids[0]
          }), _extends({}, (0, _editable.createRow)(), {
            cells: [_extends({}, action.item, { id: action.ids[2], inline: null })],
            id: action.ids[1]
          })] : [r];
        }).reduce(_optimize.flatten, []).map(inner(row, action));

      default:
        return reduce();
    }
  }(state, action)));
};
//# sourceMappingURL=tree.js.map