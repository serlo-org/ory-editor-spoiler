{"version":3,"sources":["../src/index.js"],"names":["instance","initialState","editables","past","present","future","Editor","plugins","middleware","defaultPlugin","trigger","console","warn","store","dispatch","forEach","editable","state","unserialize","add","config","whitelist","getRegisteredNames","PluginService","Editable","createEmptyState","id","cells"],"mappings":";;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;AANA;;;AAUA,IAAIA,iBAAJ;;AAEA,IAAMC,eAAe,SAAfA,YAAe;AAAA,SAAO;AAC1BC,eAAW;AACTC,YAAM,EADG;AAETC,eAAS,EAFA;AAGTC,cAAQ;AAHC;AADe,GAAP;AAAA,CAArB;;AAQA;;;;IAGMC,M,GAMJ,kBAUQ;AAAA;;AAAA,iFAAJ,EAAI;AAAA,MATNC,OASM,QATNA,OASM;AAAA,6BARNC,UAQM;AAAA,MARNA,UAQM,mCARO,EAQP;AAAA,4BAPNN,SAOM;AAAA,MAPNA,SAOM,kCAPM,EAON;AAAA,gCANNO,aAMM;AAAA,MANNA,aAMM;;AAAA;;AAAA,OAuBRC,OAvBQ,GAuBE,EAvBF;;AACN,MAAIV,QAAJ,EAAc;AACZW,YAAQC,IAAR,CAAa,2EAAb;AACD;;AAEDZ,aAAW,IAAX;AACA,OAAKa,KAAL,GAAa,qBAAYZ,cAAZ,EAA4BO,UAA5B,CAAb;AACA,OAAKD,OAAL,GAAe,qBAAkBA,OAAlB,CAAf;AACA,OAAKC,UAAL,GAAkBA,UAAlB;AACA,OAAKE,OAAL,GAAe,sBAAQ,KAAKG,KAAL,CAAWC,QAAnB,CAAf;AACA,OAAKL,aAAL,GAAqBA,aAArB;;AAEAP,YAAUa,OAAV,CAAkB,UAACC,QAAD,EAA4B;AAC5C,QAAMC,QAAQ,MAAKV,OAAL,CAAaW,WAAb,CAAyBF,QAAzB,CAAd;AACA,UAAKN,OAAL,CAAaM,QAAb,CAAsBG,GAAtB,cACKF,KADL;AAEEG,cAAQ;AACNC,mBAAW,MAAKd,OAAL,CAAae,kBAAb;AADL;AAFV;AAMD,GARD;AASD,C;;QAMDC,a;QACAC,Q;QACAlB,M,GAAAA,M;AAGK,IAAMmB,8CAAmB,SAAnBA,gBAAmB;AAAA,SAAO,EAAEC,IAAI,kBAAN,EAAcC,OAAO,EAArB,EAAP;AAAA,CAAzB;;kBAEQrB,M","file":"index.js","sourcesContent":["// @flow\n/* eslint-disable no-use-before-define, no-underscore-dangle */\nimport uuid from 'uuid/v4'\nimport Editable from './components/Editable'\nimport createStore from './store'\nimport { actions } from './actions'\nimport PluginService from './service/plugin'\nimport pluginDefault from './service/plugin/default'\nimport type { Editable as EditableType } from './types/editable'\nimport type Store from './types/redux'\n\nlet instance: Editor\n\nconst initialState = () => ({\n  editables: {\n    past: [],\n    present: [],\n    future: []\n  }\n})\n\n/**\n * Editor is the core interface for dealing with the editor.\n */\nclass Editor {\n  store: Store\n  plugins: PluginService\n  defaultPlugin: any\n  middleware: []\n\n  constructor({\n    plugins,\n    middleware = [],\n    editables = [],\n    defaultPlugin = pluginDefault\n  }: {\n    plugins: { content: [], layout: [] },\n    middleware: [],\n    editables: EditableType[],\n    defaultPlugin: any\n  } = {}) {\n    if (instance) {\n      console.warn('You have defined multiple instances of Editor, this could cause problems.')\n    }\n\n    instance = this\n    this.store = createStore(initialState(), middleware)\n    this.plugins = new PluginService(plugins)\n    this.middleware = middleware\n    this.trigger = actions(this.store.dispatch)\n    this.defaultPlugin = defaultPlugin\n\n    editables.forEach((editable: EditableType) => {\n      const state = this.plugins.unserialize(editable)\n      this.trigger.editable.add({\n        ...state,\n        config: {\n          whitelist: this.plugins.getRegisteredNames()\n        }\n      })\n    })\n  }\n\n  trigger = {}\n}\n\nexport {\n  PluginService,\n  Editable,\n  Editor\n}\n\nexport const createEmptyState = () => ({ id: uuid(), cells: [] })\n\nexport default Editor\n"]}