'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEmptyState = exports.Editor = exports.Editable = exports.PluginService = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

var _Editable = require('./components/Editable');

var _Editable2 = _interopRequireDefault(_Editable);

var _store = require('./store');

var _store2 = _interopRequireDefault(_store);

var _actions = require('./actions');

var _plugin = require('./service/plugin');

var _plugin2 = _interopRequireDefault(_plugin);

var _default = require('./service/plugin/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
/* eslint-disable no-use-before-define, no-underscore-dangle */


var instance = void 0;

var initialState = function initialState() {
  return {
    editables: {
      past: [],
      present: [],
      future: []
    }
  };
};

/**
 * Editor is the core interface for dealing with the editor.
 */

var Editor = function Editor() {
  var _this = this;

  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      plugins = _ref.plugins,
      _ref$middleware = _ref.middleware,
      middleware = _ref$middleware === undefined ? [] : _ref$middleware,
      _ref$editables = _ref.editables,
      editables = _ref$editables === undefined ? [] : _ref$editables,
      _ref$defaultPlugin = _ref.defaultPlugin,
      defaultPlugin = _ref$defaultPlugin === undefined ? _default2.default : _ref$defaultPlugin;

  _classCallCheck(this, Editor);

  this.trigger = {};

  if (instance) {
    console.warn('You have defined multiple instances of Editor, this could cause problems.');
  }

  instance = this;
  this.store = (0, _store2.default)(initialState(), middleware);
  this.plugins = new _plugin2.default(plugins);
  this.middleware = middleware;
  this.trigger = (0, _actions.actions)(this.store.dispatch);
  this.defaultPlugin = defaultPlugin;

  editables.forEach(function (editable) {
    var state = _this.plugins.unserialize(editable);
    _this.trigger.editable.add(_extends({}, state, {
      config: {
        whitelist: _this.plugins.getRegisteredNames()
      }
    }));
  });
};

exports.PluginService = _plugin2.default;
exports.Editable = _Editable2.default;
exports.Editor = Editor;
var createEmptyState = exports.createEmptyState = function createEmptyState() {
  return { id: (0, _v2.default)(), cells: [] };
};

exports.default = Editor;
//# sourceMappingURL=index.js.map