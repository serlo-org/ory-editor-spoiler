{"version":3,"sources":["../../../src/selector/editable/index.js"],"names":["nodeInner","current","props","id","rows","cells","found","find","n","f","Boolean","editable","editables","present","purifiedEditable","state","map","c","editableConfig","config","node","tree","Error","searchNodeEverywhere","i","length","purifiedNode","r"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nimport type { Editable, Cell, Row, Config } from '../../types/editable'\n\ntype Editables = {\n  editables: {\n    past: Editable[],\n    present: Editable[],\n    future: Editable[]\n  }\n}\n\nconst nodeInner = (current: any, props: Editable): any => {\n  const { id, rows = [], cells = [] } = current\n  if (id === props.id) {\n    return current\n  }\n\n  let found = false;\n  [...rows, ...cells].find((n: any) => {\n    const f = nodeInner(n, props)\n    if (f) {\n      found = f\n    }\n    return Boolean(f)\n  })\n\n  return found\n}\n\nexport const editable = ({ editables }: Editables = {}, { id }: { id: string }): any =>\n  editables.present.find(({ id: current }: Editable = {}) => current === id) || {}\n\nexport const editables = ({ editables: { present } }: Editables = {}) => present\n\nexport const purifiedEditable = (state: Editables, props: Editable) => {\n  const found = editable(state, props)\n  return {\n    ...found,\n    cells: (found.cells || []).map((c: Cell | string) => typeof c === 'string' ? c : c.id)\n  }\n}\n\nexport const editableConfig = (state: Editables, { editable: id }: { editable: string }): Config => editable(state, { id }).config\n\nexport const node = (state: Object, props: Object): Object => {\n  const tree = editable(state, { id: props.editable })\n  if (!state) {\n    throw new Error(`Could not find editable: ${props.editable}`)\n  }\n\n  return { ...nodeInner(tree, props) }\n}\n\nexport const searchNodeEverywhere = (state: Object, id: string) => {\n  for (let i = 0; i < state.editables.present.length; i++) {\n    const n = node(state, { id, editable: state.editables.present[i].id })\n    if (n.id) {\n      return {\n        node: n,\n        editable: state.editables.present[i]\n      }\n    }\n  }\n\n  return null\n}\n\nexport const purifiedNode = (state: Editables, props: Editable): Object => {\n  const found = node(state, props)\n\n  if (found.cells) {\n    found.cells = found.cells.map((c: Cell): string => c.id)\n  }\n\n  if (found.rows) {\n    found.rows = found.rows.map((r: Row): string => r.id)\n  }\n\n  return found\n}\n"]}