'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var nodeInner = function nodeInner(current, props) {
  var id = current.id,
      _current$rows = current.rows,
      rows = _current$rows === undefined ? [] : _current$rows,
      _current$cells = current.cells,
      cells = _current$cells === undefined ? [] : _current$cells;

  if (id === props.id) {
    return current;
  }

  var found = false;
  [].concat(_toConsumableArray(rows), _toConsumableArray(cells)).find(function (n) {
    var f = nodeInner(n, props);
    if (f) {
      found = f;
    }
    return Boolean(f);
  });

  return found;
};

var editable = exports.editable = function editable() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      editables = _ref2.editables;

  var _ref = arguments[1];
  var id = _ref.id;
  return editables.present.find(function () {
    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        current = _ref3.id;

    return current === id;
  }) || {};
};

var editables = exports.editables = function editables() {
  var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      present = _ref4.editables.present;

  return present;
};

var purifiedEditable = exports.purifiedEditable = function purifiedEditable(state, props) {
  var found = editable(state, props);
  return _extends({}, found, {
    cells: (found.cells || []).map(function (c) {
      return typeof c === 'string' ? c : c.id;
    })
  });
};

var editableConfig = exports.editableConfig = function editableConfig(state, _ref5) {
  var id = _ref5.editable;
  return editable(state, { id: id }).config;
};

var node = exports.node = function node(state, props) {
  var tree = editable(state, { id: props.editable });
  if (!state) {
    throw new Error('Could not find editable: ' + props.editable);
  }

  return _extends({}, nodeInner(tree, props));
};

var searchNodeEverywhere = exports.searchNodeEverywhere = function searchNodeEverywhere(state, id) {
  for (var i = 0; i < state.editables.present.length; i++) {
    var n = node(state, { id: id, editable: state.editables.present[i].id });
    if (n.id) {
      return {
        node: n,
        editable: state.editables.present[i]
      };
    }
  }

  return null;
};

var purifiedNode = exports.purifiedNode = function purifiedNode(state, props) {
  var found = node(state, props);

  if (found.cells) {
    found.cells = found.cells.map(function (c) {
      return c.id;
    });
  }

  if (found.rows) {
    found.rows = found.rows.map(function (r) {
      return r.id;
    });
  }

  return found;
};
//# sourceMappingURL=index.js.map