{"version":3,"sources":["../../src/types/editable.js"],"names":["createCell","id","rows","size","hover","inline","focused","focusSource","resizable","bounds","left","right","hasInlineNeighbour","levels","above","below","createRow","cells","hasInlineChildren"],"mappings":";;;;;;;AAEA;;AAsCO,IAAMA,kCAAa,SAAbA,UAAa;AAAA,SAAa;AACrCC,QAAI,EADiC;AAErCC,UAAM,EAF+B;AAGrCC,UAAM,EAH+B;AAIrCC,WAAO,IAJ8B;AAKrCC,YAAQ,IAL6B;AAMrCC,aAAS,KAN4B;AAOrCC,iBAAa,EAPwB;AAQrCC,eAAW,KAR0B;AASrCC,YAAQ,EAAEC,MAAM,CAAR,EAAWC,OAAO,CAAlB,EAT6B;AAUrCC,wBAAoB,IAViB;AAWrCC,YAAQ;AACNC,aAAO,CADD;AAENC,aAAO,CAFD;AAGNJ,aAAO,CAHD;AAIND,YAAM;AAJA;AAX6B,GAAb;AAAA,CAAnB;AAvCP;AAwHO,IAAMM,gCAAY,SAAZA,SAAY;AAAA,SAAY;AACnCf,QAAI,EAD+B;AAEnCG,WAAO,IAF4B;AAGnCa,WAAO,EAH4B;AAInCC,uBAAmB;AAJgB,GAAZ;AAAA,CAAlB","file":"editable.js","sourcesContent":["// @flow\n/* eslint no-use-before-define: off */\nimport { ContentPlugin, LayoutPlugin } from '../service/plugin/classes'\n\nexport type Config = {\n  whitelist: Array<string>,\n}\n\ntype AbstractCell<T> = {\n  id: string,\n\n  rows: Array<T>,\n\n  content?: {\n    plugin: ContentPlugin,\n    state: Object\n  },\n  layout?: {\n    plugin: LayoutPlugin,\n    state: Object\n  },\n\n  size: number,\n  hover: ?string,\n  inline: ?string,\n  focused: boolean,\n  focusSource: string,\n  resizable: boolean,\n  bounds: { left: number, right: number },\n  hasInlineNeighbour: ?string,\n  levels: {\n    above: number,\n    below: number,\n    right: number,\n    left: number\n  }\n};\n\nexport type Cell = AbstractCell<Row>\n\nexport const createCell = (): Cell => ({\n  id: '',\n  rows: [],\n  size: 12,\n  hover: null,\n  inline: null,\n  focused: false,\n  focusSource: '',\n  resizable: false,\n  bounds: { left: 0, right: 0 },\n  hasInlineNeighbour: null,\n  levels: {\n    above: 0,\n    below: 0,\n    right: 0,\n    left: 0\n  }\n})\n\nexport type ComponentizedCell = {\n  id: string,\n  editable: string,\n  ancestors: Array<string>,\n  config: Config,\n\n  node: AbstractCell<string>,\n  rawNode(): Cell,\n\n  isInsertMode: boolean,\n  isResizeMode: boolean,\n  isDisplayMode: boolean,\n  isEditMode: boolean,\n  isLayoutMode: boolean,\n  isPreviewMode: boolean,\n\n  steps: number,\n  rowHeight: number,\n  rowWidth: number,\n\n  updateDimensions: Function,\n  onResize: Function,\n  styles: any,\n\n  // the raw signatures of the following actions are different (e.g. `(id) => (state): Action`) but\n  // when mapping to props, only signature of the most inner method is used (`(state): Action`).\n  clearHover(): void,\n  removeCell(): void,\n  resizeCell(id: string): void,\n  focusCell(): void,\n  blurCell(id: string): void,\n  blurAllCells(): void,\n  updateCellContent(state: Object): void,\n  updateCellLayout(state: Object): void,\n  cancelCellDrag(drag: string): void,\n\n  dragCell(drag: string): void,\n  cellHoverAbove(drag: Cell, hover: Cell, level: number): void,\n  cellHoverBelow(drag: Cell, hover: Cell, level: number): void,\n  cellHoverLeftOf(drag: Cell, hover: Cell, level: number): void,\n  cellHoverRightOf(drag: Cell, hover: Cell, level: number): void,\n  cellHoverInlineLeft(drag: Cell, hover: Cell): void,\n  cellHoverInlineRight(drag: Cell, hover: Cell): void,\n  insertCellAbove(type: string): void,\n  insertCellBelow(type: string): void,\n  insertCellLeftInline(type: string): void,\n  insertCellLeftOf(type: string): void,\n  insertCellRightInline(type: string): void,\n  insertCellRightOf(type: string): void,\n\n  onChange(state: any): void\n}\n\ntype AbstractRow<T> = {\n  id: string,\n  hover: ?string,\n  cells: Array<T>,\n  hasInlineChildren: boolean\n}\n\nexport type Row = AbstractRow<Cell>\n\nexport const createRow = (): Row => ({\n  id: '',\n  hover: null,\n  cells: [],\n  hasInlineChildren: false\n})\n\nexport type ComponentizedRow = {\n  id: string,\n  config: Config,\n  editable: string,\n  ancestors: Array<string>,\n  containerWidth: number,\n  containerHeight: number,\n\n  node: AbstractRow<string>,\n\n  isInsertMode: boolean,\n  isResizeMode: boolean,\n  isDisplayMode: boolean,\n  isEditMode: boolean,\n  isLayoutMode: boolean,\n  isPreviewMode: boolean,\n\n  clearHover(): void,\n  cancelCellDrag(drag: string): void,\n  blurAllCells(): void,\n}\n\ntype AbstractEditable<T> = {\n  id: string,\n  config: Config,\n  cells: Array<T>,\n  cellOrder: Array<{ id: string, isLeaf: boolean }>\n}\n\nexport type Editable = AbstractEditable<Cell>\n\nexport type EditableComponentState = {\n  id: string,\n  node: AbstractEditable<string>,\n\n  containerHeight: number,\n  containerWidth: number,\n  isInsertMode: boolean,\n  isResizeMode: boolean,\n  isDisplayMode: boolean,\n  isEditMode: boolean,\n  isLayoutMode: boolean,\n  isPreviewMode: boolean,\n  defaultPlugin: any,\n\n  blurAllCells(): void,\n  createFallbackCell(): void\n}\n"]}