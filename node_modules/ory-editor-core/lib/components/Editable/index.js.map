{"version":3,"sources":["../../../src/components/Editable/index.js"],"names":["Editable","previousState","onChange","props","state","editor","store","getState","id","serialized","plugins","serialize","Error","subscribe","defaultPlugin"],"mappings":";;;;;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;IAIMA,Q;;;;;;;;;;;;;;0LAUJC,a,GAAqB,E,QAYrBC,Q,GAAW,YAAM;AACf,UAAI,OAAO,MAAKC,KAAL,CAAWD,QAAlB,KAA+B,UAAnC,EAA+C;AAC7C;AACD;AACD,UAAMA,WAAW,MAAKC,KAAL,CAAWD,QAAX,IAAwB;AAAA,eAAO,EAAP;AAAA,OAAzC;;AAEA,UAAME,QAAa,wBAAS,MAAKD,KAAL,CAAWE,MAAX,CAAkBC,KAAlB,CAAwBC,QAAxB,EAAT,EAA6C,EAAEC,IAAI,MAAKL,KAAL,CAAWK,EAAjB,EAA7C,CAAnB;AACA,UAAIJ,UAAU,MAAKH,aAAnB,EAAkC;AAChC;AACD;;AAED,UAAMQ,aAAa,MAAKN,KAAL,CAAWE,MAAX,CAAkBK,OAAlB,CAA0BC,SAA1B,CAAoCP,KAApC,CAAnB;AACAF,eAASO,UAAT;AACD,K;;;;;wCAlCmB;AAClB,UAAI,CAAC,KAAKN,KAAL,CAAWK,EAAhB,EAAoB;AAClB,cAAM,IAAII,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,WAAKT,KAAL,CAAWE,MAAX,CAAkBC,KAAlB,CAAwBO,SAAxB,CAAkC,KAAKX,QAAvC;AACA,WAAKD,aAAL,GAAqB,IAArB;AACD;;;6BA6BQ;AAAA,mBAOH,KAAKE,KAPF;AAAA,UAELK,EAFK,UAELA,EAFK;AAAA,iCAGLH,MAHK;AAAA,UAIHC,KAJG,iBAIHA,KAJG;AAAA,UAKHQ,aALG,iBAKHA,aALG;;;AASP,aACE;AAAA;AAAA,UAAU,OAAOR,KAAjB;AACE;AAAA;AAAA;AACE;AAAA;AAAA,cAAiB,IAAIE,EAArB;AACE,6DAAO,IAAIA,EAAX,EAAe,eAAeM,aAA9B;AADF;AADF;AADF,OADF;AASD;;;;;;kBAGYd,Q","file":"index.js","sourcesContent":["// @flow\nimport React, { Component } from 'react'\nimport { Provider } from 'react-redux'\n\nimport DragDropContext from '../DragDropContext'\nimport HotKeyDecorator from '../HotKey/Decorator'\nimport { editable } from '../../selector/editable'\nimport PluginService from '../../service/plugin'\nimport Inner from './Inner'\n\nimport type { Store } from '../../types/redux'\n\nclass Editable extends Component {\n  componentDidMount() {\n    if (!this.props.id) {\n      throw new Error('The state must have an unique id')\n    }\n\n    this.props.editor.store.subscribe(this.onChange)\n    this.previousState = null\n  }\n\n  previousState: any = {}\n\n  props: {\n    id: string,\n    editor: {\n      plugins: PluginService,\n      store: Store,\n      defaultPlugin: any\n    },\n    onChange?: Function\n  }\n\n  onChange = () => {\n    if (typeof this.props.onChange !== 'function') {\n      return\n    }\n    const onChange = this.props.onChange || (() => ({}))\n\n    const state: any = editable(this.props.editor.store.getState(), { id: this.props.id })\n    if (state === this.previousState) {\n      return\n    }\n\n    const serialized = this.props.editor.plugins.serialize(state)\n    onChange(serialized)\n  }\n\n  render() {\n    const {\n      id,\n      editor: {\n        store,\n        defaultPlugin\n      },\n    } = this.props\n\n    return (\n      <Provider store={store}>\n        <DragDropContext>\n          <HotKeyDecorator id={id}>\n            <Inner id={id} defaultPlugin={defaultPlugin} />\n          </HotKeyDecorator>\n        </DragDropContext>\n      </Provider>\n    )\n  }\n}\n\nexport default Editable\n"]}