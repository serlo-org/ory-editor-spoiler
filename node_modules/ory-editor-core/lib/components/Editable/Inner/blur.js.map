{"version":3,"sources":["../../../../src/components/Editable/Inner/blur.js"],"names":["instantiated","blurAll","blurAllCells","e","c","target","HTMLElement","classList","contains","parentElement","enableGlobalBlurring","document","body","addEventListener","disableGlobalBlurring","removeEventListener"],"mappings":";;;;;AACA,IAAIA,eAAe,CAAnB;;AAEA;AACA;AACA;AACA,IAAMC,UAAU,SAAVA,OAAU,CAACC,YAAD;AAAA,SAA4B,UAACC,CAAD,EAAc;AACxD,QAAIC,IAAID,EAAEE,MAAV;AACA,QAAID,aAAaE,WAAjB,EAA8B;AAC5B,UAAIF,EAAEG,SAAF,CAAYC,QAAZ,CAAqB,kBAArB,CAAJ,EAA8C;AAC5C;AACD;;AAED;AACA,aAAOJ,IAAIA,EAAEK,aAAb,EAA4B;AAC1B,YAAIL,EAAEG,SAAF,CAAYC,QAAZ,CAAqB,kBAArB,CAAJ,EAA8C;AAC5C;AACD;AACF;AACDN;AACD;AACF,GAfe;AAAA,CAAhB;;AAiBO,IAAMQ,sDAAuB,SAAvBA,oBAAuB,CAACR,YAAD,EAA4B;AAC9D,MAAIF,iBAAiB,CAAjB,IAAsBW,QAAtB,IAAkCA,SAASC,IAA/C,EAAqD;AACnDD,aAASC,IAAT,CAAcC,gBAAd,CAA+B,WAA/B,EAA4CZ,QAAQC,YAAR,CAA5C;AACAF,mBAAe,CAAf;AACA,WAAOC,QAAQC,YAAR,CAAP;AACD;;AAED,MAAIF,eAAe,CAAnB,EAAsB;AACpBA,oBAAgB,CAAhB;AACD;AACF,CAVM;;AAYA,IAAMc,wDAAwB,SAAxBA,qBAAwB,CAACZ,YAAD,EAA4B;AAC/D,MAAI,CAACF,YAAD,KAAkB,CAAlB,IAAuBW,QAAvB,IAAmCA,SAASC,IAAhD,EAAsD;AACpDD,aAASC,IAAT,CAAcG,mBAAd,CAAkC,WAAlC,EAA+Cd,QAAQC,YAAR,CAA/C;AACAF,mBAAe,CAAf;AACA,WAAOC,QAAQC,YAAR,CAAP;AACD;;AAED,MAAIF,eAAe,CAAnB,EAAsB;AACpBA,oBAAgB,CAAhB;AACD;AACF,CAVM","file":"blur.js","sourcesContent":["// @flow\nlet instantiated = 0\n\n// We need to stop some events from bubbling up, so we go up the tree from\n// the event source and check if one of the parents is the root editor node.\n// If not, we blur all cells because the editor lost focus.\nconst blurAll = (blurAllCells: Function) => (e: Event) => {\n  let c = e.target\n  if (c instanceof HTMLElement) {\n    if (c.classList.contains('ory-prevent-blur')) {\n      return\n    }\n\n    /* eslint no-cond-assign: [\"off\"] */\n    while (c = c.parentElement) {\n      if (c.classList.contains('ory-prevent-blur')) {\n        return\n      }\n    }\n    blurAllCells()\n  }\n}\n\nexport const enableGlobalBlurring = (blurAllCells: Function) => {\n  if (instantiated === 0 && document && document.body) {\n    document.body.addEventListener('mousedown', blurAll(blurAllCells))\n    instantiated = 1\n    return blurAll(blurAllCells)\n  }\n\n  if (instantiated > 0) {\n    instantiated += 1\n  }\n}\n\nexport const disableGlobalBlurring = (blurAllCells: Function) => {\n  if (!instantiated === 1 && document && document.body) {\n    document.body.removeEventListener('mousedown', blurAll(blurAllCells))\n    instantiated = 0\n    return blurAll(blurAllCells)\n  }\n\n  if (instantiated > 0) {\n    instantiated -= 1\n  }\n}\n"]}