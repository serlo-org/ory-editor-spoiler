'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _reactRedux = require('react-redux');

var _reselect = require('reselect');

var _pathOr = require('ramda/src/pathOr');

var _pathOr2 = _interopRequireDefault(_pathOr);

var _mousetrap = require('mousetrap');

var _mousetrap2 = _interopRequireDefault(_mousetrap);

var _undo = require('../../actions/undo');

var _cell = require('../../actions/cell');

var _display = require('../../selector/display');

var _focus = require('../../selector/focus');

var _editable2 = require('../../selector/editable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
/* eslint-disable no-empty-function */


var hotKeyHandler = function hotKeyHandler(n, key) {
  return (0, _pathOr2.default)((0, _pathOr2.default)(function () {
    return Promise.resolve();
  }, ['content', 'plugin', key], n), ['layout', 'plugin', key], n);
};

var nextLeaf = function nextLeaf() {
  var order = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var current = arguments[1];

  var last = void 0;

  return order.find(function (c) {
    if (last === current) {
      return c.isLeaf;
    }
    last = c.id;
    return false;
  });
};

var previousLeaf = function previousLeaf(order, current) {
  return nextLeaf([].concat(_toConsumableArray(order)).reverse(), current);
};

var falser = function falser(err) {
  if (err) {
    console.log(err);
  }
};

if (_mousetrap2.default) {
  _mousetrap2.default.prototype.stopCallback = function () {
    return false;
  };
}

var wasInitialized = false;

var Decorator = function (_Component) {
  _inherits(Decorator, _Component);

  function Decorator() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Decorator);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Decorator.__proto__ || Object.getPrototypeOf(Decorator)).call.apply(_ref, [this].concat(args))), _this), _this.handlers = {
      undo: function undo() {
        var _this$props = _this.props,
            id = _this$props.id,
            undo = _this$props.undo;

        undo(id);
      },
      redo: function redo() {
        var _this$props2 = _this.props,
            id = _this$props2.id,
            redo = _this$props2.redo;

        redo(id);
      },

      // remove cells
      remove: function remove(e) {
        var _this$props3 = _this.props,
            focus = _this$props3.focus,
            removeCell = _this$props3.removeCell,
            isEditMode = _this$props3.isEditMode;

        if (!isEditMode) {
          return;
        }

        var _this$props$searchNod = _this.props.searchNodeEverywhere(focus),
            n = _this$props$searchNod.node;

        hotKeyHandler(n, 'handleRemoveHotKey')(e, n).then(function () {
          return removeCell(focus);
        }).catch(falser);
      },

      // focus next cell
      focusNext: function focusNext(e) {
        var _this$props4 = _this.props,
            focus = _this$props4.focus,
            focusCell = _this$props4.focusCell,
            blurAllCells = _this$props4.blurAllCells,
            isEditMode = _this$props4.isEditMode;

        if (!isEditMode) {
          return;
        }

        var _this$props$searchNod2 = _this.props.searchNodeEverywhere(focus),
            n = _this$props$searchNod2.node,
            editable = _this$props$searchNod2.editable;

        hotKeyHandler(n, 'handleFocusNextHotKey')(e, n).then(function () {
          var found = nextLeaf(editable.cellOrder, focus);
          if (found) {
            blurAllCells();
            focusCell(found.id);
          }
        }).catch(falser);
      },

      // focus previous cell
      focusPrev: function focusPrev(e) {
        var _this$props5 = _this.props,
            focus = _this$props5.focus,
            focusCell = _this$props5.focusCell,
            blurAllCells = _this$props5.blurAllCells,
            isEditMode = _this$props5.isEditMode;

        if (!isEditMode) {
          return;
        }

        var _this$props$searchNod3 = _this.props.searchNodeEverywhere(focus),
            n = _this$props$searchNod3.node,
            editable = _this$props$searchNod3.editable;

        hotKeyHandler(n, 'handleFocusPreviousHotKey')(e, n).then(function () {
          var found = previousLeaf(editable.cellOrder, focus);
          if (found) {
            blurAllCells();
            focusCell(found.id);
          }
        }).catch(falser);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Decorator, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (!wasInitialized) {
        if (!_mousetrap2.default) {
          return;
        }

        _mousetrap2.default.bind(['ctrl+z', 'command+z'], this.handlers.undo);
        _mousetrap2.default.bind(['ctrl+shift+z', 'ctrl+y', 'command+shift+z', 'command+y'], this.handlers.redo);
        _mousetrap2.default.bind(['del', 'backspace'], this.handlers.remove);
        _mousetrap2.default.bind(['down', 'right'], this.handlers.focusNext);
        _mousetrap2.default.bind(['up', 'left'], this.handlers.focusPrev);
        wasInitialized = true;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;

      return children;
    }
  }]);

  return Decorator;
}(_react.Component);

Decorator.propTypes = {
  children: _react.PropTypes.node.isRequired,
  id: _react.PropTypes.string.isRequired
};

var mapStateToProps = (0, _reselect.createStructuredSelector)({
  isEditMode: _display.isEditMode, focus: _focus.focus,
  node: function node(state) {
    return function (id, editable) {
      return (0, _editable2.node)(state, { id: id, editable: editable });
    };
  },
  searchNodeEverywhere: function searchNodeEverywhere(state) {
    return function (id) {
      return (0, _editable2.searchNodeEverywhere)(state, id);
    };
  },
  editable: function editable(state, props) {
    return function (id) {
      return (0, _editable2.editable)(state, id ? { id: id } : props);
    };
  },
  editables: _editable2.editables
});

var mapDispatchToProps = {
  undo: _undo.undo,
  redo: _undo.redo,
  removeCell: _cell.removeCell,
  focusCell: function focusCell(id) {
    return (0, _cell.focusCell)(id)();
  },
  blurAllCells: _cell.blurAllCells
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Decorator);
//# sourceMappingURL=Decorator.js.map