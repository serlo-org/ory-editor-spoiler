'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactHotkeys = require('react-hotkeys');

var _reactRedux = require('react-redux');

var _pathOr = require('ramda/src/pathOr');

var _pathOr2 = _interopRequireDefault(_pathOr);

var _reselect = require('reselect');

var _undo2 = require('../../actions/undo');

var _cell = require('../../actions/cell');

var _display = require('../../selector/display');

var _focus = require('../../selector/focus');

var _editable2 = require('../../selector/editable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
/* eslint-disable no-empty-function */


var hotKeyHandler = function hotKeyHandler(n, key) {
  return (0, _pathOr2.default)((0, _pathOr2.default)(function () {
    return Promise.resolve();
  }, ['content', 'plugin', key], n), ['layout', 'plugin', key], n);
};

var nextLeaf = function nextLeaf() {
  var order = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var current = arguments[1];

  var last = void 0;

  return order.find(function (c) {
    if (last === current) {
      return c.isLeaf;
    }
    last = c.id;
    return false;
  });
};

var previousLeaf = function previousLeaf(order, current) {
  return nextLeaf([].concat(_toConsumableArray(order)).reverse(), current);
};

var falser = function falser(err) {
  if (err) {
    console.log(err);
  }
};

// TODO cleanup and tests #143
var handlers = function handlers(props) {
  var id = props.id,
      _undo = props.undo,
      _redo = props.redo,
      focus = props.focus,
      removeCell = props.removeCell,
      focusCell = props.focusCell,
      blurAllCells = props.blurAllCells,
      isEditMode = props.isEditMode,
      node = props.node,
      editable = props.editable;

  return {
    undo: function undo() {
      return _undo(id);
    },
    redo: function redo() {
      return _redo(id);
    },

    // remove cells
    remove: function remove(e) {
      if (!isEditMode) {
        return;
      }

      var n = node(focus, id);
      hotKeyHandler(n, 'handleRemoveHotKey')(e, n).then(function () {
        return removeCell(focus);
      }).catch(falser);
    },

    // focus next cell
    focusNext: function focusNext(e) {
      if (!isEditMode) {
        return;
      }

      var n = node(focus, id);
      hotKeyHandler(n, 'handleFocusNextHotKey')(e, n).then(function () {
        var found = nextLeaf(editable.cellOrder, focus);
        if (found) {
          blurAllCells();
          focusCell(found.id);
        }
      }).catch(falser);
    },

    // focus previous cell
    focusPrev: function focusPrev(e) {
      if (!isEditMode) {
        return;
      }

      var n = node(focus, id);
      hotKeyHandler(n, 'handleFocusPreviousHotKey')(e, n).then(function () {
        var found = previousLeaf(editable.cellOrder, focus);
        if (found) {
          blurAllCells();
          focusCell(found.id);
        }
      }).catch(falser);
    }
  };
};

var Decorator = function Decorator(props) {
  return _react2.default.createElement(
    _reactHotkeys.HotKeys,
    { handlers: handlers(props), style: { outline: 'none' } },
    props.children
  );
};

var mapStateToProps = (0, _reselect.createStructuredSelector)({
  isEditMode: _display.isEditMode, focus: _focus.focus,
  node: function node(state) {
    return function (id, editable) {
      return (0, _editable2.node)(state, { id: id, editable: editable });
    };
  },
  editable: function editable(state, props) {
    return (0, _editable2.editable)(state, props);
  }
});

var mapDispatchToProps = {
  undo: _undo2.undo,
  redo: _undo2.redo,
  removeCell: _cell.removeCell,
  focusCell: function focusCell(id) {
    return (0, _cell.focusCell)(id)();
  },
  blurAllCells: _cell.blurAllCells
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Decorator);
//# sourceMappingURL=Handler.js.map