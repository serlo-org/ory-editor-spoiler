{"version":3,"sources":["../../../src/components/Row/index.js"],"names":["Row","props","shouldComponentUpdate","whitelist","config","Droppable","mapStateToProps","isLayoutMode","isResizeMode","isInsertMode","isEditMode","node","rawNode","state","mapDispatchToProps","blurAllCells"],"mappings":";;;;;;;;AACA;;;;AACA;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;IAIMA,G;;;AACJ,eAAYC,KAAZ,EAAqC;AAAA;;AAAA,0GAC7BA,KAD6B;;AAAA,UAMrCC,qBANqC;AAAA,QAEjBC,SAFiB,GAEDF,KAFC,CAE3BG,MAF2B,CAEjBD,SAFiB;;AAGnC,UAAKE,SAAL,GAAiB,yBAAUF,SAAV,CAAjB;AAHmC;AAIpC;;;;6BAMQ;AACP;AACA,UAAME,YAAY,KAAKA,SAAvB;AACA,UAAMJ,QAAQ,KAAKA,KAAnB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aACE;AAAC,iBAAD;AAAeA,aAAf;AACE,uDAAWA,KAAX;AADF,OADF;AAKD;;;;;;AAGH,IAAMK,kBAAkB,wCAAyB;AAC/CC,qCAD+C;AAE/CH,kCAF+C;AAG/CI,qCAH+C;AAI/CC,qCAJ+C;AAK/CC,iCAL+C;AAM/CC,8BAN+C;AAO/CC,WAAS,iBAACC,KAAD,EAAaZ,KAAb;AAAA,WAA4B;AAAA,aAAM,oBAAKY,KAAL,EAAYZ,KAAZ,CAAN;AAAA,KAA5B;AAAA;AAPsC,CAAzB,CAAxB;;AAUA,IAAMa,qBAAqB;AACzBC;AADyB,CAA3B;;kBAIe,4BAAa,yBAAQT,eAAR,EAAyBQ,kBAAzB,EAA6Cd,GAA7C,CAAb,C","file":"index.js","sourcesContent":["// @flow\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { createStructuredSelector } from 'reselect'\n\nimport droppable from './Droppable'\nimport Inner from './inner'\nimport dimensions from '../Dimensions'\nimport { shouldPureComponentUpdate } from '../../helper/shouldComponentUpdate'\nimport { isLayoutMode, isEditMode, isResizeMode, isInsertMode } from '../../selector/display'\nimport { editableConfig, purifiedNode, node } from '../../selector/editable'\nimport { blurAllCells } from '../../actions/cell'\n\nimport type { ComponentizedRow } from '../../types/editable'\n\nclass Row extends Component {\n  constructor(props: ComponentizedRow) {\n    super(props)\n    const { config: { whitelist } } = props\n    this.Droppable = droppable(whitelist)\n  }\n\n  shouldComponentUpdate = shouldPureComponentUpdate\n  props: ComponentizedRow\n  Droppable: Object\n\n  render() {\n    // const { isResizeMode }: ComponentizedRow = this.props\n    const Droppable = this.Droppable\n    const props = this.props\n\n    // originally, flexbox grid was used in d&d:\n    //\n    //  if (isLayoutMode || isResizeMode || isInsertMode) {\n\n    // if (isResizeMode) {\n    //   props.styles = {\n    //     ...props.styles,\n    //     ...commonStyles.flexbox,\n    //     ...localStyles // override defaults\n    //   }\n    // }\n\n    return (\n      <Droppable {...props}>\n        <Inner {...props} />\n      </Droppable>\n    )\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isLayoutMode,\n  config: editableConfig,\n  isResizeMode,\n  isInsertMode,\n  isEditMode,\n  node: purifiedNode,\n  rawNode: (state: any, props: any) => () => node(state, props)\n})\n\nconst mapDispatchToProps = {\n  blurAllCells\n}\n\nexport default dimensions()(connect(mapStateToProps, mapDispatchToProps)(Row))\n"]}