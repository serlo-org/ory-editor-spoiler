{"version":3,"sources":["../../../../src/components/Row/Droppable/dnd.js"],"names":["last","hover","drag","clear","id","clearHover","target","monitor","component","getItem","isOver","shallow","ancestors","indexOf","warn","leading","canDrop","item","drop","didDrop","cancelCellDrag","connect","connectDropTarget","dropTarget","isOverCurrent"],"mappings":";;;;;;;AACA;;;;AAEA;;AAGA;;AACA;;;;;;AAEA,IAAIA,OAAsC;AACxCC,SAAO,EADiC;AAExCC,QAAM;AAFkC,CAA1C;;AAKA,IAAMC,QAAQ,SAARA,KAAQ,CAACF,KAAD,EAA0BC,IAA1B,EAA2C;AACvD,MAAID,MAAMG,EAAN,KAAaJ,KAAKC,KAAlB,IAA2BC,SAASF,KAAKE,IAA7C,EAAmD;AACjD;AACD;AACDF,SAAO,EAAEC,OAAOA,MAAMG,EAAf,EAAmBF,UAAnB,EAAP;AACAD,QAAMI,UAAN,CAAiBH,IAAjB;AACD,CAND;;AAQO,IAAMI,0BAAS;AACpBL,SAAO,sBAAS,UAACA,KAAD,EAA0BM,OAA1B,EAA4CC,SAA5C,EAAkE;AAChF,QAAMN,OAAOK,QAAQE,OAAR,EAAb;;AAEA,QAAI,CAACP,IAAL,EAAW;AACT;AACD,KAFD,MAEO,IAAIA,KAAKE,EAAL,KAAYH,MAAMG,EAAtB,EAA0B;AAC/BD,YAAMF,KAAN,EAAaC,KAAKE,EAAlB;AACA;AACD,KAHM,MAGA,IAAI,CAACG,QAAQG,MAAR,CAAe,EAAEC,SAAS,IAAX,EAAf,CAAL,EAAwC;AAC7C;AACD,KAFM,MAEA,IAAIV,MAAMW,SAAN,CAAgBC,OAAhB,CAAwBX,KAAKE,EAA7B,IAAmC,CAAC,CAAxC,EAA2C;AAChD;AACAD,YAAMF,KAAN,EAAaC,KAAKE,EAAlB;AACA;AACD,KAJM,MAIA,IAAI,CAACH,MAAMG,EAAX,EAAe;AACpB;AACA,uBAAOU,IAAP,CAAY,+CAAZ,EAA6Db,KAA7D,EAAoEC,IAApE;AACA;AACD;;AAED,wCAAwBD,KAAxB,EAA+BM,OAA/B,EAAwCC,SAAxC,EAAmD,iBAAnD;AACD,GArBM,mBAqBG,EAAEO,SAAS,KAAX,EArBH,CADa;;AAwBpBC,WAAS,uBAAsCT,OAAtC,EAA2D;AAAA,QAAxDH,EAAwD,QAAxDA,EAAwD;AAAA,QAApDQ,SAAoD,QAApDA,SAAoD;;AAClE,QAAMK,OAAOV,QAAQE,OAAR,EAAb;AACA,WAAOQ,KAAKb,EAAL,KAAYA,EAAZ,IAAkBQ,UAAUC,OAAV,CAAkBI,KAAKb,EAAvB,MAA+B,CAAC,CAAzD;AACD,GA3BmB;;AA6BpBc,MA7BoB,gBA6BfjB,KA7Be,EA6BUM,OA7BV,EA6B4BC,SA7B5B,EA6B+C;AACjE,QAAMN,OAAOK,QAAQE,OAAR,EAAb;;AAEA,QAAIF,QAAQY,OAAR,MAAqB,CAACZ,QAAQG,MAAR,CAAe,EAAEC,SAAS,IAAX,EAAf,CAA1B,EAA6D;AAC3D;AACA;AACD,KAHD,MAGO,IAAIV,MAAMW,SAAN,CAAgBC,OAAhB,CAAwBX,KAAKE,EAA7B,IAAmC,CAAC,CAAxC,EAA2C;AAChD;AACAH,YAAMmB,cAAN,CAAqBlB,KAAKE,EAA1B;AACA;AACD,KAJM,MAIA,IAAIF,KAAKE,EAAL,KAAYH,MAAMG,EAAtB,EAA0B;AAC/BH,YAAMmB,cAAN,CAAqBlB,KAAKE,EAA1B;AACA;AACD;;AAED,yCAAyBH,KAAzB,EAAgCM,OAAhC,EAAyCC,SAAzC,EAAoD,iBAApD;AACD;AA7CmB,CAAf;;AAgDA,IAAMa,4BAAU,iBAACA,QAAD,EAAqBd,OAArB;AAAA,SAA2C;AAChEe,uBAAmBD,SAAQE,UAAR,EAD6C;AAEhEC,mBAAejB,QAAQG,MAAR,CAAe,EAAEC,SAAS,IAAX,EAAf;AAFiD,GAA3C;AAAA,CAAhB","file":"dnd.js","sourcesContent":["// @flow\nimport throttle from 'lodash.throttle'\n\nimport { computeAndDispatchHover, computeAndDispatchInsert } from '../../../service/hover/input'\nimport type { Monitor, Connector } from '../../../types/react-dnd'\nimport type { ComponentizedRow } from '../../../types/editable'\nimport { delay } from '../../../helper/throttle'\nimport logger from '../../../service/logger'\n\nlet last: {hover: string, drag: string} = {\n  hover: '',\n  drag: ''\n}\n\nconst clear = (hover: ComponentizedRow, drag: string) => {\n  if (hover.id === last.hover && drag === last.drag) {\n    return\n  }\n  last = { hover: hover.id, drag }\n  hover.clearHover(drag)\n}\n\nexport const target = {\n  hover: throttle((hover: ComponentizedRow, monitor: Monitor, component: Object) => {\n    const drag = monitor.getItem()\n\n    if (!drag) {\n      return\n    } else if (drag.id === hover.id) {\n      clear(hover, drag.id)\n      return\n    } else if (!monitor.isOver({ shallow: true })) {\n      return\n    } else if (hover.ancestors.indexOf(drag.id) > -1) {\n      // If hovering over a child of itself\n      clear(hover, drag.id)\n      return\n    } else if (!hover.id) {\n      // If hovering over something that isn't a cell or hasn't an id, do nothing. Should be an edge case\n      logger.warn('Canceled cell.drop.target.hover: no id given.', hover, drag)\n      return\n    }\n\n    computeAndDispatchHover(hover, monitor, component, '10x10-no-inline')\n  }, delay, { leading: false }),\n\n  canDrop: ({ id, ancestors }: ComponentizedRow, monitor: Monitor) => {\n    const item = monitor.getItem()\n    return item.id !== id || ancestors.indexOf(item.id) === -1\n  },\n\n  drop(hover: ComponentizedRow, monitor: Monitor, component: Object) {\n    const drag = monitor.getItem()\n\n    if (monitor.didDrop() || !monitor.isOver({ shallow: true })) {\n      // If the item drop occurred deeper down the tree, don't do anything\n      return\n    } else if (hover.ancestors.indexOf(drag.id) > -1) {\n      // If hovering over a child of itself\n      hover.cancelCellDrag(drag.id)\n      return\n    } else if (drag.id === hover.id) {\n      hover.cancelCellDrag(drag.id)\n      return\n    }\n\n    computeAndDispatchInsert(hover, monitor, component, '10x10-no-inline')\n  }\n}\n\nexport const connect = (connect: Connector, monitor: Monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOverCurrent: monitor.isOver({ shallow: true })\n})\n"]}