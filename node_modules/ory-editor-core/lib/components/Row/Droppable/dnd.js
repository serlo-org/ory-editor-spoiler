'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connect = exports.target = undefined;

var _lodash = require('lodash.throttle');

var _lodash2 = _interopRequireDefault(_lodash);

var _input = require('../../../service/hover/input');

var _throttle = require('../../../helper/throttle');

var _logger = require('../../../service/logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var last = {
  hover: '',
  drag: ''
};

var clear = function clear(hover, drag) {
  if (hover.id === last.hover && drag === last.drag) {
    return;
  }
  last = { hover: hover.id, drag: drag };
  hover.clearHover(drag);
};

var target = exports.target = {
  hover: (0, _lodash2.default)(function (hover, monitor, component) {
    var drag = monitor.getItem();

    if (!drag) {
      return;
    } else if (drag.id === hover.id) {
      clear(hover, drag.id);
      return;
    } else if (!monitor.isOver({ shallow: true })) {
      return;
    } else if (hover.ancestors.indexOf(drag.id) > -1) {
      // If hovering over a child of itself
      clear(hover, drag.id);
      return;
    } else if (!hover.id) {
      // If hovering over something that isn't a cell or hasn't an id, do nothing. Should be an edge case
      _logger2.default.warn('Canceled cell.drop.target.hover: no id given.', hover, drag);
      return;
    }

    (0, _input.computeAndDispatchHover)(hover, monitor, component, '10x10-no-inline');
  }, _throttle.delay, { leading: false }),

  canDrop: function canDrop(_ref, monitor) {
    var id = _ref.id,
        ancestors = _ref.ancestors;

    var item = monitor.getItem();
    return item.id !== id || ancestors.indexOf(item.id) === -1;
  },

  drop: function drop(hover, monitor, component) {
    var drag = monitor.getItem();

    if (monitor.didDrop() || !monitor.isOver({ shallow: true })) {
      // If the item drop occurred deeper down the tree, don't do anything
      return;
    } else if (hover.ancestors.indexOf(drag.id) > -1) {
      // If hovering over a child of itself
      hover.cancelCellDrag(drag.id);
      return;
    } else if (drag.id === hover.id) {
      hover.cancelCellDrag(drag.id);
      return;
    }

    (0, _input.computeAndDispatchInsert)(hover, monitor, component, '10x10-no-inline');
  }
};

var connect = exports.connect = function connect(_connect, monitor) {
  return {
    connectDropTarget: _connect.dropTarget(),
    isOverCurrent: monitor.isOver({ shallow: true })
  };
};
//# sourceMappingURL=dnd.js.map