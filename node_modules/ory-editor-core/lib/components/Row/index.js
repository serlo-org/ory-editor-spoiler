'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _reselect = require('reselect');

var _Droppable = require('./Droppable');

var _Droppable2 = _interopRequireDefault(_Droppable);

var _inner = require('./inner');

var _inner2 = _interopRequireDefault(_inner);

var _Dimensions = require('../Dimensions');

var _Dimensions2 = _interopRequireDefault(_Dimensions);

var _shouldComponentUpdate = require('../../helper/shouldComponentUpdate');

var _display = require('../../selector/display');

var _editable = require('../../selector/editable');

var _cell = require('../../actions/cell');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Row = function (_Component) {
  _inherits(Row, _Component);

  function Row(props) {
    _classCallCheck(this, Row);

    var _this = _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).call(this, props));

    _this.shouldComponentUpdate = _shouldComponentUpdate.shouldPureComponentUpdate;
    var whitelist = props.config.whitelist;

    _this.Droppable = (0, _Droppable2.default)(whitelist);
    return _this;
  }

  _createClass(Row, [{
    key: 'render',
    value: function render() {
      // const { isResizeMode }: ComponentizedRow = this.props
      var Droppable = this.Droppable;
      var props = this.props;

      // originally, flexbox grid was used in d&d:
      //
      //  if (isLayoutMode || isResizeMode || isInsertMode) {

      // if (isResizeMode) {
      //   props.styles = {
      //     ...props.styles,
      //     ...commonStyles.flexbox,
      //     ...localStyles // override defaults
      //   }
      // }

      return _react2.default.createElement(
        Droppable,
        props,
        _react2.default.createElement(_inner2.default, props)
      );
    }
  }]);

  return Row;
}(_react.Component);

var mapStateToProps = (0, _reselect.createStructuredSelector)({
  isLayoutMode: _display.isLayoutMode,
  config: _editable.editableConfig,
  isResizeMode: _display.isResizeMode,
  isInsertMode: _display.isInsertMode,
  isEditMode: _display.isEditMode,
  node: _editable.purifiedNode,
  rawNode: function rawNode(state, props) {
    return function () {
      return (0, _editable.node)(state, props);
    };
  }
});

var mapDispatchToProps = {
  blurAllCells: _cell.blurAllCells
};

exports.default = (0, _Dimensions2.default)()((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Row));
//# sourceMappingURL=index.js.map