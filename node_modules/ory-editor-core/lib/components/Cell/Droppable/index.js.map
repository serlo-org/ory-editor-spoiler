{"version":3,"sources":["../../../../src/components/Cell/Droppable/index.js"],"names":["hoverActions","insertActions","Droppable","shouldComponentUpdate","props","connectDropTarget","isLayoutMode","isInsertMode","className","isLeaf","hover","node","children","mapDispatchToProps","dropTypes"],"mappings":";;;;;;;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAEA;;AACA;;IAAYA,Y;;AACZ;;IAAYC,a;;AACZ;;;;;;;;;;;;;;IAEMC,S;;;;;;;;;;;;;;4LACJC,qB;;;;;6BAeS;AAAA;;AAAA,mBACiG,KAAKC,KADtG;AAAA,UACCC,iBADD,UACCA,iBADD;AAAA,UACoBC,YADpB,UACoBA,YADpB;AAAA,UACkCC,YADlC,UACkCA,YADlC;AAAA,UACgDC,SADhD,UACgDA,SADhD;AAAA,UAC2DC,MAD3D,UAC2DA,MAD3D;AAAA,UAC2EC,KAD3E,UACmEC,IADnE,CAC2ED,KAD3E;AAAA,UACoFE,QADpF,UACoFA,QADpF;;;AAGP,UAAI,EAAEN,gBAAgBC,YAAlB,CAAJ,EAAqC;AACnC,eACE;AAAA;AAAA,YAAK,WAAW,0BAAWC,SAAX,EAAsB,8BAAtB,CAAhB;AACGI;AADH,SADF;AAKD;;AAED,aAAOP,kBACL;AAAA;AAAA,UAAK,WAAW,0BACdG,SADc,EAEd,oBAFc;AAIZ,kDAAsCE;AAJ1B,0EAKmBA,KALnB,EAK6BA,KAL7B,gCAMZ,yBANY,EAMeD,MANf;AAAhB;AASGG;AATH,OADK,CAAP;AAaD;;;;;;AAGH,IAAMC,kCAA0Bb,YAA1B,EAA2CC,aAA3C,CAAN;;kBAEe,yBAAQ,IAAR,EAAcY,kBAAd,EAAkC,0BAAW;AAAA,MAAGC,SAAH,SAAGA,SAAH;AAAA,SAAiDA,SAAjD;AAAA,CAAX,6BAA+FZ,SAA/F,CAAlC,C","file":"index.js","sourcesContent":["// @flow\nimport React, { Component } from 'react'\nimport { DropTarget as dropTarget } from 'react-dnd'\nimport { connect } from 'react-redux'\nimport classNames from 'classnames'\n\nimport { shouldPureComponentUpdate } from '../../../helper/shouldComponentUpdate'\nimport * as hoverActions from '../../../actions/cell/drag'\nimport * as insertActions from '../../../actions/cell/insert'\nimport { target, connect as monitorConnect } from './helper/dnd'\n\nclass Droppable extends Component {\n  shouldComponentUpdate = shouldPureComponentUpdate\n\n  props: {\n    isLeaf: boolean,\n    isOver: boolean,\n    isOverCurrent: boolean,\n    isDragging: boolean,\n    isInsertMode: boolean,\n    isLayoutMode: boolean,\n    node: { hover: string, inline: string },\n    children: any,\n    className: string,\n    connectDropTarget<T>(e: T): T,\n  }\n\n  render() {\n    const { connectDropTarget, isLayoutMode, isInsertMode, className, isLeaf, node: { hover }, children } = this.props\n\n    if (!(isLayoutMode || isInsertMode)) {\n      return (\n        <div className={classNames(className, 'ory-cell-droppable-container')}>\n          {children}\n        </div>\n      )\n    }\n\n    return connectDropTarget(\n      <div className={classNames(\n        className,\n        'ory-cell-droppable',\n        {\n          'ory-cell-droppable-is-over-current': hover,\n          [`ory-cell-droppable-is-over-${hover}`]: hover,\n          'ory-cell-droppable-leaf': isLeaf\n        })}\n      >\n        {children}\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = { ...hoverActions, ...insertActions }\n\nexport default connect(null, mapDispatchToProps)(dropTarget(({ dropTypes }: { dropTypes: Array<string> }) => dropTypes, target, monitorConnect)(Droppable))\n"]}