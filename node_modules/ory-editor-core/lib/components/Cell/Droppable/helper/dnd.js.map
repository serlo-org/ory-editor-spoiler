{"version":3,"sources":["../../../../../src/components/Cell/Droppable/helper/dnd.js"],"names":["last","hover","drag","clear","id","clearHover","target","monitor","component","getItem","isOver","shallow","ancestors","indexOf","warn","allowInlineNeighbours","leading","canDrop","item","drop","didDrop","cancelCellDrag","connect","connectDropTarget","dropTarget","isOverCurrent"],"mappings":"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","file":"dnd.js","sourcesContent":["// @flow\nimport throttle from 'lodash.throttle'\nimport pathOr from 'ramda/src/pathOr'\n\nimport { computeAndDispatchHover, computeAndDispatchInsert } from '../../../../service/hover/input'\nimport { delay } from '../../../../helper/throttle'\nimport logger from '../../../../service/logger'\n\nimport type { ComponentizedCell } from '../../../../types/editable'\n\nlet last: {hover: string, drag: string} = { hover: '', drag: '' }\n\nconst clear = (hover: ComponentizedCell, drag: string) => {\n  if (hover.id === last.hover && drag === last.drag) {\n    return\n  }\n  last = { hover: hover.id, drag }\n  hover.clearHover()\n}\n\nexport const target = {\n  hover: throttle((hover: ComponentizedCell, monitor: Object, component: Object) => {\n    const drag: ComponentizedCell = monitor.getItem()\n\n    if (!drag) {\n      // item undefined, happens when throttle triggers after drop\n      return\n    } else if (drag.id === hover.id) {\n      // If hovering over itself, do nothing\n      clear(hover, drag.id)\n      return\n    } else if (!monitor.isOver({ shallow: true })) {\n      // If hovering over ancestor cell, do nothing (we are going to propagate later in the tree anyways)\n      return\n    } else if (hover.ancestors.indexOf(drag.id) > -1) {\n      // If hovering over a child of itself\n      clear(hover, drag.id)\n      return\n    } else if (!hover.id) {\n      // If hovering over something that isn't a cell or hasn't an id, do nothing. Should be an edge case\n      logger.warn('Canceled cell drop, no id given.', hover, drag)\n      return\n    }\n\n    last = { hover: hover.id, drag: drag.id }\n    const allowInlineNeighbours = pathOr(false, ['node', 'content', 'plugin', 'allowInlineNeighbours'], hover)\n    computeAndDispatchHover(hover, monitor, component, `10x10${allowInlineNeighbours ? '' : '-no-inline'}`)\n  }, delay, { leading: false }),\n\n  canDrop: ({ id, ancestors }: ComponentizedCell, monitor: Object) => {\n    const item = monitor.getItem()\n    return item.id !== id && ancestors.indexOf(item.id) === -1\n  },\n\n  drop(hover: ComponentizedCell, monitor: Object, component: Object) {\n    const drag = monitor.getItem()\n\n    if (monitor.didDrop() || !monitor.isOver({ shallow: true })) {\n      // If the item drop occurred deeper down the tree, don't do anything\n      return\n    } else if (drag.id === hover.id) {\n      // If the item being dropped on itself do nothing\n      hover.cancelCellDrag(drag.id)\n      return\n    } else if (hover.ancestors.indexOf(drag.id) > -1) {\n      // If hovering over a child of itself, don't propagate further\n      hover.cancelCellDrag(drag.id)\n      return\n    }\n\n    last = { hover: hover.id, drag: drag.id }\n    const allowInlineNeighbours = pathOr(false, ['node', 'content', 'plugin', 'allowInlineNeighbours'], hover)\n    computeAndDispatchInsert(hover, monitor, component, `10x10${allowInlineNeighbours ? '' : '-no-inline'}`)\n  }\n}\n\nexport const connect = (connect: Object, monitor: Object) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n  isOverCurrent: monitor.isOver({ shallow: true })\n})\n"]}