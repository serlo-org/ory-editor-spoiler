'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var source = exports.source = {
  beginDrag: function beginDrag(props) {
    // Beginn dragging the cell
    props.dragCell(props.id);
    return _extends({}, props, {
      // we do not want to pass down the react children or we will risk circular dependencies.
      children: null,
      node: _extends({}, props.node, {
        rows: props.rawNode().rows
      })
    });
  },
  endDrag: function endDrag(_ref, monitor) {
    var cancelCellDrag = _ref.cancelCellDrag,
        id = _ref.id;

    if (monitor.didDrop()) {
      // If the item drop occurred deeper down the tree, don't do anything
      return;
    }

    // If drag ended but drop did not occur, cancel dragging
    cancelCellDrag(id);
  }
};
var collect = exports.collect = function collect(connect, monitor) {
  return {
    connectDragSource: connect.dragSource(),
    isDragging: monitor.isDragging(),
    connectDragPreview: connect.dragPreview()
  };
};
//# sourceMappingURL=dnd.js.map