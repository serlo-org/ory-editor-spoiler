{"version":3,"sources":["../../../../src/components/Cell/Resizable/index.js"],"names":["Resizable","props","state","stepWidth","Number","width","steps","onResize","event","size","newSize","onChange","setState","sw","node","bounds","inline","children","Infinity","right","grid","axis","offsetParent","document","body","mapStateToProps","mapDispatchToProps","resizeMode","editMode"],"mappings":";;;;;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;AAEA;;AACA;;;;;;;;;;;;IAGMA,S;;;AACJ,qBAAYC,KAAZ,EAAsC;AAAA;;AAAA,sHAC9BA,KAD8B;;AAAA,UAWtCC,KAXsC,GAWtB;AACdC,iBAAWC,MADG;AAEdC,aAAOD,MAFO;AAGdE,aAAOF;AAHO,KAXsB;;AAAA,UAmBtCG,QAnBsC,GAmB3B,UAACC,KAAD,QAAoC;AAAA,UAAnBC,IAAmB,QAAnBA,IAAmB;;AAC7C,UAAMC,UAAU,yBAAY,MAAKR,KAAjB,EAAwB,MAAKD,KAA7B,EAAoCQ,IAApC,CAAhB;AACA,YAAKR,KAAL,CAAWU,QAAX,CAAoBD,OAApB;AACA,YAAKE,QAAL,CAAc,EAAEP,OAAOK,UAAU,MAAKR,KAAL,CAAWC,SAA9B,EAAd;AACD,KAvBqC;;AAGpC,QAAMU,KAAK,8BAAiBZ,KAAjB,CAAX;AACA,UAAKC,KAAL,GAAa;AACXC,iBAAWU,EADA;AAEXR,aAAOJ,MAAMa,IAAN,CAAWL,IAAX,GAAkBI,EAFd;AAGXP,aAAQL,MAAMK,KAAN,GAAc,CAAf,IAAqB;AAHjB,KAAb;AAJoC;AASrC;;;;6BAgBQ;AAAA,mBACwC,KAAKL,KAD7C;AAAA,+BACCa,IADD;AAAA,UACSC,MADT,eACSA,MADT;AAAA,UACiBC,MADjB,eACiBA,MADjB;AAAA,UAC2BC,QAD3B,UAC2BA,QAD3B;;;AAGP,aACE;AAAA;AAAA;AACE,qBAAW,0BACT,gBADS,EAET,oBAFS,sDAGuBD,UAAU,EAHjC,GAGwCA,MAHxC,EADb;AAME,oBAAU,KAAKT,QANjB;AAOE,0BAAgBS,SAAS,IAAT,GAAgB,CAAC,KAAKd,KAAL,CAAWC,SAAZ,EAAuBe,QAAvB,CAPlC;AAQE,0BAAgBF,SAAS,IAAT,GAAgB,CAACD,OAAOI,KAAP,GAAe,KAAKjB,KAAL,CAAWC,SAA3B,EAAsCe,QAAtC,CARlC;AASE,yBAAe,EAAEE,MAAM,CAAC,KAAKlB,KAAL,CAAWC,SAAZ,EAAuB,CAAvB,CAAR,EAAmCkB,MAAM,MAAzC,EAAiDC,cAAcC,SAASC,IAAxE,EATjB;AAUE,iBAAO,KAAKtB,KAAL,CAAWG,KAVpB;AAWE,kBAAQ;AAXV;AAcE;AAAA;AAAA;AAAMY;AAAN;AAdF,OADF;AAkBD;;;;;;AAGH,IAAMQ,kBAAkB,wCAAyB,EAAzB,CAAxB;;AAEA,IAAMC,qBAAqB,EAAEC,+BAAF,EAAcC,2BAAd,EAA3B;;kBAEe,yBAAQH,eAAR,EAAyBC,kBAAzB,EAA6C1B,SAA7C,C","file":"index.js","sourcesContent":["// @flow\nimport React, { Component } from 'react'\nimport { Resizable as ReactResizeable } from 'react-resizable'\nimport { connect } from 'react-redux'\nimport classNames from 'classnames'\nimport { createStructuredSelector } from 'reselect'\n\nimport { resizeMode, editMode } from '../../../actions/display'\nimport { computeStepWidth, widthToSize } from './helper.js'\nimport type { ComponentizedCell } from '../../../types/editable'\n\nclass Resizable extends Component {\n  constructor(props: ComponentizedCell) {\n    super(props)\n\n    const sw = computeStepWidth(props)\n    this.state = {\n      stepWidth: sw,\n      width: props.node.size * sw,\n      steps: (props.steps - 1) || 11,\n    }\n  }\n\n  state: Object = {\n    stepWidth: Number,\n    width: Number,\n    steps: Number\n  }\n\n  props: ComponentizedCell & { children: any }\n\n  onResize = (event: Event, { size }: Object) => {\n    const newSize = widthToSize(this.state, this.props, size)\n    this.props.onChange(newSize)\n    this.setState({ width: newSize * this.state.stepWidth })\n  }\n\n  render() {\n    const { node: { bounds, inline }, children } = this.props\n\n    return (\n      <ReactResizeable\n        className={classNames(\n          'ory-cell-inner',\n          'ory-cell-resizable', {\n            [`ory-cell-resizable-inline-${inline || ''}`]: inline,\n          })}\n        onResize={this.onResize}\n        minConstraints={inline ? null : [this.state.stepWidth, Infinity]}\n        maxConstraints={inline ? null : [bounds.right * this.state.stepWidth, Infinity]}\n        draggableOpts={{ grid: [this.state.stepWidth, 0], axis: 'none', offsetParent: document.body }}\n        width={this.state.width}\n        height={0}\n      >\n        {/* this div needs to be kept or resize will be broken */}\n        <div>{children}</div>\n      </ReactResizeable>\n    )\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({})\n\nconst mapDispatchToProps = { resizeMode, editMode }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Resizable)\n"]}