'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _reselect = require('reselect');

var _cell = require('../../../actions/cell');

var _shouldComponentUpdate = require('../../../helper/shouldComponentUpdate');

var _display = require('../../../selector/display');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// TODO clean me up #157
var Content = function (_Component) {
  _inherits(Content, _Component);

  function Content() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Content);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Content.__proto__ || Object.getPrototypeOf(Content)).call.apply(_ref, [this].concat(args))), _this), _this.shouldComponentUpdate = _shouldComponentUpdate.shouldPureComponentUpdate, _this.onRef = function (ref) {
      _this.ref = ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Content, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var was = this.props.node.focused;
      var _nextProps$node = nextProps.node,
          is = _nextProps$node.focused,
          focusSource = _nextProps$node.focusSource;
      var isEditMode = nextProps.isEditMode,
          editable = nextProps.editable,
          id = nextProps.id,
          _nextProps$node2 = nextProps.node,
          _nextProps$node2$cont = _nextProps$node2.content;
      _nextProps$node2$cont = _nextProps$node2$cont === undefined ? {} : _nextProps$node2$cont;
      var _nextProps$node2$cont2 = _nextProps$node2$cont.plugin,
          handleFocus = _nextProps$node2$cont2.handleFocus,
          handleBlur = _nextProps$node2$cont2.handleBlur,
          name = _nextProps$node2$cont2.name,
          version = _nextProps$node2$cont2.version,
          _nextProps$node2$cont3 = _nextProps$node2$cont.state,
          state = _nextProps$node2$cont3 === undefined ? {} : _nextProps$node2$cont3,
          focused = _nextProps$node2.focused,
          updateCellContent = nextProps.updateCellContent;

      // FIXME this is really shitty because it will break when the state changes before the blur comes through, see #157

      var pass = {
        editable: editable,
        id: id,
        state: state,
        focused: isEditMode && focused,
        readOnly: !isEditMode,
        onChange: updateCellContent,
        name: name, version: version
      };

      // Basically we check if the focus state changed and if yes, we execute the callback handler from the plugin, that
      // can set some side effects.
      if (!was && is) {
        // We need this because otherwise we lose hotkey focus on elements like spoilers.
        // This could probably be solved in an easier way by listening to window.document?
        handleFocus(pass, focusSource, this.ref);
      } else if (was && !is) {
        handleBlur(pass);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          isPreviewMode = _props.isPreviewMode,
          isEditMode = _props.isEditMode,
          editable = _props.editable,
          id = _props.id,
          _props$node = _props.node,
          _props$node$content = _props$node.content;
      _props$node$content = _props$node$content === undefined ? {} : _props$node$content;
      var _props$node$content$p = _props$node$content.plugin,
          Component = _props$node$content$p.Component,
          name = _props$node$content$p.name,
          version = _props$node$content$p.version,
          _props$node$content$s = _props$node$content.state,
          state = _props$node$content$s === undefined ? {} : _props$node$content$s,
          focused = _props$node.focused,
          updateCellContent = _props.updateCellContent;
      var _props2 = this.props,
          focusCell = _props2.focusCell,
          blurCell = _props2.blurCell;


      var focusProps = void 0;
      if (!isPreviewMode) {
        focusProps = {
          onMouseDown: function onMouseDown() {
            if (!focused) {
              focusCell({ source: 'onMouseDown' });
            }
            return true;
          }
        };
      }

      return _react2.default.createElement(
        'div',
        _extends({}, focusProps, {
          tabIndex: '-1',
          style: { outline: 'none' },
          ref: this.onRef,
          className: 'ory-cell-inner ory-cell-leaf'
        }),
        _react2.default.createElement(Component, {
          editable: editable,
          id: id,
          state: state,
          focused: isEditMode && focused,
          name: name,
          version: version,
          readOnly: !isEditMode,
          onChange: updateCellContent,
          focus: focusCell,
          blur: blurCell
        })
      );
    }
  }]);

  return Content;
}(_react.Component);

var mapStateToProps = (0, _reselect.createStructuredSelector)({ isEditMode: _display.isEditMode, isLayoutMode: _display.isLayoutMode, isPreviewMode: _display.isPreviewMode });

var mapDispatchToProps = function mapDispatchToProps(dispatch, _ref2) {
  var id = _ref2.id;
  return (0, _redux.bindActionCreators)({
    updateCellContent: (0, _cell.updateCellContent)(id)
  }, dispatch);
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Content);
//# sourceMappingURL=index.js.map