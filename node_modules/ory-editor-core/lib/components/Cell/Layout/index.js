'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _reselect = require('reselect');

var _shouldComponentUpdate = require('../../../helper/shouldComponentUpdate');

var _Row = require('../../Row');

var _Row2 = _interopRequireDefault(_Row);

var _cell = require('../../../actions/cell');

var _display = require('../../../selector/display');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Layout = function (_React$Component) {
  _inherits(Layout, _React$Component);

  function Layout() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Layout);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Layout.__proto__ || Object.getPrototypeOf(Layout)).call.apply(_ref, [this].concat(args))), _this), _this.shouldComponentUpdate = _shouldComponentUpdate.shouldPureComponentUpdate, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Layout, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          id = _props.id,
          _props$node = _props.node,
          _props$node$rows = _props$node.rows,
          rows = _props$node$rows === undefined ? [] : _props$node$rows,
          _props$node$layout = _props$node.layout;
      _props$node$layout = _props$node$layout === undefined ? {} : _props$node$layout;
      var Component = _props$node$layout.plugin.Component,
          _props$node$layout$st = _props$node$layout.state,
          state = _props$node$layout$st === undefined ? {} : _props$node$layout$st,
          editable = _props.editable,
          _props$ancestors = _props.ancestors,
          ancestors = _props$ancestors === undefined ? [] : _props$ancestors,
          updateCellLayout = _props.updateCellLayout,
          isEditMode = _props.isEditMode;


      return _react2.default.createElement(
        'div',
        { className: 'ory-cell-inner' },
        _react2.default.createElement(
          Component,
          {
            id: id,
            state: state,
            editable: editable,
            readOnly: !isEditMode,
            onChange: updateCellLayout
          },
          rows.map(function (r) {
            return _react2.default.createElement(_Row2.default, {
              editable: editable,
              ancestors: [].concat(_toConsumableArray(ancestors), [id]),
              key: r,
              id: r
            });
          })
        )
      );
    }
  }]);

  return Layout;
}(_react2.default.Component);

var mapStateToProps = (0, _reselect.createStructuredSelector)({ isEditMode: _display.isEditMode });

var mapDispatchToProps = function mapDispatchToProps(dispatch, _ref2) {
  var id = _ref2.id;
  return (0, _redux.bindActionCreators)({
    updateCellLayout: (0, _cell.updateCellLayout)(id)
  }, dispatch);
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Layout);
//# sourceMappingURL=index.js.map