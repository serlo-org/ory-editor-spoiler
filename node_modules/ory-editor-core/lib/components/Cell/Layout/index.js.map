{"version":3,"sources":["../../../../src/components/Cell/Layout/index.js"],"names":["Layout","shouldComponentUpdate","props","id","node","rows","layout","Component","plugin","state","editable","ancestors","updateCellLayout","isEditMode","map","r","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;AACA;;;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;AACA;;AACA;;;;;;;;;;;;IAIMA,M;;;;;;;;;;;;;;sLACJC,qB;;;;;6BAGS;AAAA,mBAgBgB,KAAKC,KAhBrB;AAAA,UAELC,EAFK,UAELA,EAFK;AAAA,+BAGLC,IAHK;AAAA,yCAIHC,IAJG;AAAA,UAIHA,IAJG,oCAII,EAJJ;AAAA,2CAKHC,MALG;AAAA,8DAUC,EAVD;AAAA,UAOCC,SAPD,sBAMDC,MANC,CAOCD,SAPD;AAAA,qDASDE,KATC;AAAA,UASDA,KATC,yCASO,EATP;AAAA,UAYLC,QAZK,UAYLA,QAZK;AAAA,oCAaLC,SAbK;AAAA,UAaLA,SAbK,oCAaO,EAbP;AAAA,UAcLC,gBAdK,UAcLA,gBAdK;AAAA,UAeLC,UAfK,UAeLA,UAfK;;;AAkBP,aACE;AAAA;AAAA,UAAK,WAAU,gBAAf;AACE;AAAC,mBAAD;AAAA;AACE,gBAAIV,EADN;AAEE,mBAAOM,KAFT;AAGE,sBAAUC,QAHZ;AAIE,sBAAU,CAACG,UAJb;AAKE,sBAAUD;AALZ;AAOGP,eAAKS,GAAL,CAAS,UAACC,CAAD;AAAA,mBACR;AACE,wBAAUL,QADZ;AAEE,sDAAeC,SAAf,IAA0BR,EAA1B,EAFF;AAGE,mBAAKY,CAHP;AAIE,kBAAIA;AAJN,cADQ;AAAA,WAAT;AAPH;AADF,OADF;AAmBD;;;;EAzCkB,gBAAMR,S;;AA4C3B,IAAMS,kBAAkB,wCAAyB,EAAEH,+BAAF,EAAzB,CAAxB;;AAEA,IAAMI,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD;AAAA,MAAuBf,EAAvB,SAAuBA,EAAvB;AAAA,SAAmD,+BAAmB;AAC/FS,sBAAkB,4BAAiBT,EAAjB;AAD6E,GAAnB,EAE3Ee,QAF2E,CAAnD;AAAA,CAA3B;;kBAIe,yBAAQF,eAAR,EAAyBC,kBAAzB,EAA6CjB,MAA7C,C","file":"index.js","sourcesContent":["// @flow\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { createStructuredSelector } from 'reselect'\n\nimport { shouldPureComponentUpdate } from '../../../helper/shouldComponentUpdate'\nimport Row from '../../Row'\nimport { updateCellLayout } from '../../../actions/cell'\nimport { isEditMode } from '../../../selector/display'\n\nimport type { ComponentizedCell } from '../../../types/editable'\n\nclass Layout extends React.Component {\n  shouldComponentUpdate = shouldPureComponentUpdate\n  props: ComponentizedCell\n\n  render() {\n    const {\n      id,\n      node: {\n        rows = [],\n        layout: {\n          plugin: {\n            Component\n          },\n          state = {}\n        } = {}\n      },\n      editable,\n      ancestors = [],\n      updateCellLayout,\n      isEditMode\n    }: ComponentizedCell = this.props\n\n    return (\n      <div className=\"ory-cell-inner\">\n        <Component\n          id={id}\n          state={state}\n          editable={editable}\n          readOnly={!isEditMode}\n          onChange={updateCellLayout}\n        >\n          {rows.map((r: string) => (\n            <Row\n              editable={editable}\n              ancestors={[...ancestors, id]}\n              key={r}\n              id={r}\n            />))}\n        </Component>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({ isEditMode })\n\nconst mapDispatchToProps = (dispatch: Function, { id }: ComponentizedCell) => bindActionCreators({\n  updateCellLayout: updateCellLayout(id)\n}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout)\n"]}