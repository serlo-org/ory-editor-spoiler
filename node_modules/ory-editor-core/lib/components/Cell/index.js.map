{"version":3,"sources":["../../../src/components/Cell/index.js"],"names":["gridClass","size","node","isPreviewMode","isEditMode","stopClick","e","stopPropagation","Cell","shouldComponentUpdate","props","id","rowWidth","rowHeight","updateDimensions","isResizeMode","inline","resizable","hasInlineNeighbour","focused","styles","resizeCell","mapStateToProps","isInsertMode","isLayoutMode","config","rawNode","state","mapDispatchToProps","dispatch","focusCell","blurAllCells"],"mappings":";;;;;;;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;AAEA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAIA,IAAMA,YAAY,SAAZA,SAAY,OAA8E;AAAA,MAAnEC,IAAmE,QAA3EC,IAA2E,CAAnED,IAAmE;AAAA,MAA3DE,aAA2D,QAA3DA,aAA2D;AAAA,MAA5CC,UAA4C,QAA5CA,UAA4C;;AAC9F,MAAID,iBAAiBC,UAArB,EAAiC;AAC/B,0BAAmBD,iBAAiBC,UAAjB,GAA8B,IAA9B,GAAqC,IAAxD,WAAgEH,QAAQ,EAAxE;AACD;;AAED,2BAAsBA,QAAQ,EAA9B;AACD,CAND;;AAQA,IAAMI,YAAY,SAAZA,SAAY,CAACD,UAAD;AAAA,SAAyB,UAACE,CAAD;AAAA,WAAcF,aAAaE,EAAEC,eAAF,EAAb,GAAmC,IAAjD;AAAA,GAAzB;AAAA,CAAlB;;IAEMC,I;;;;;;;;;;;;;;oLACJC,qB;;;;;6BAIS;AAAA;;AAAA,mBAIH,KAAKC,KAJF;AAAA,UAELC,EAFK,UAELA,EAFK;AAAA,UAEDC,QAFC,UAEDA,QAFC;AAAA,UAESC,SAFT,UAESA,SAFT;AAAA,UAEoBC,gBAFpB,UAEoBA,gBAFpB;AAAA,UAEsCC,YAFtC,UAEsCA,YAFtC;AAAA,UAEoDX,UAFpD,UAEoDA,UAFpD;AAAA,+BAGLF,IAHK;AAAA,UAGGc,MAHH,eAGGA,MAHH;AAAA,UAGWC,SAHX,eAGWA,SAHX;AAAA,UAGsBC,kBAHtB,eAGsBA,kBAHtB;AAAA,UAG0CC,OAH1C,eAG0CA,OAH1C;;;AAMP,UAAMT,qBAAa,KAAKA,KAAlB,IAAyBU,QAAQ,IAAjC,GAAN;AACA,aACE;AAAA;AAAA;AACE,qBAAW,0BAAW,UAAX,EAAuBpB,UAAU,KAAKU,KAAf,CAAvB;AACT,6CAAiCQ;AADxB,gEAEWF,UAAU,EAFrB,GAE4BA,MAF5B,gCAIT,kBAJS,EAIWG,OAJX,gCAKT,2BALS,EAKoBJ,YALpB,gBADb;AAQE,mBAASV,UAAUD,UAAV;AARX;AAUGa,qBAAcF,YAAd,GAEG;AAAA;AAAA;AACE,gBAAIJ,EADN;AAEE,sBAAUC,QAFZ;AAGE,uBAAWC,SAHb;AAIE,8BAAkBC,gBAJpB;AAKE,kBAAMJ,MAAMR,IALd;AAME,mBAAO,EANT;AAOE,sBAAUQ,MAAMW;AAPlB;AASE,yDAAWX,KAAX;AATF,SAFH,GAcG,+CAAWA,KAAX;AAxBN,OADF;AA6BD;;;;;;AAGH,IAAMY,kBAAkB,wCAAyB;AAC/CnB,uCAD+C;AAE/CC,iCAF+C;AAG/CW,qCAH+C;AAI/C;AACAQ,qCAL+C;AAM/CC,qCAN+C;AAO/CC,kCAP+C;AAQ/CvB,8BAR+C;AAS/CwB,WAAS,iBAACC,KAAD,EAAajB,KAAb;AAAA,WAA4B;AAAA,aAAM,oBAAKiB,KAAL,EAAYjB,KAAZ,CAAN;AAAA,KAA5B;AAAA;AATsC,CAAzB,CAAxB;;AAYA,IAAMkB,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD;AAAA,MAAuBlB,EAAvB,SAAuBA,EAAvB;AAAA,SAAmD,+BAAmB;AAC/FU,gBAAY,sBAAWV,EAAX,CADmF;AAE/FmB,eAAW,qBAAUnB,EAAV,CAFoF;AAG/FoB;AAH+F,GAAnB,EAI3EF,QAJ2E,CAAnD;AAAA,CAA3B;;kBAMgB,yBAAQP,eAAR,EAAyBM,kBAAzB,EAA6CpB,IAA7C,C","file":"index.js","sourcesContent":["// @flow\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport classNames from 'classnames'\nimport { bindActionCreators } from 'redux'\nimport { createStructuredSelector } from 'reselect'\n\nimport Inner from './Inner'\nimport { shouldPureComponentUpdate } from '../../helper/shouldComponentUpdate'\nimport { editableConfig, node, purifiedNode } from '../../selector/editable'\nimport { isPreviewMode, isEditMode, isResizeMode, isInsertMode, isLayoutMode } from '../../selector/display'\nimport { resizeCell, focusCell, blurAllCells } from '../../actions/cell'\nimport Resizable from './Resizable'\n\nimport type { ComponentizedCell } from '../../types/editable'\n\nconst gridClass = ({ node: { size }, isPreviewMode, isEditMode }: ComponentizedCell): string => {\n  if (isPreviewMode || isEditMode) {\n    return `ory-cell-${isPreviewMode || isEditMode ? 'md' : 'xs'}-${size || 12} ory-cell-xs-12`\n  }\n\n  return `ory-cell-xs-${size || 12}`\n}\n\nconst stopClick = (isEditMode: boolean) => (e: Event) => isEditMode ? e.stopPropagation() : null\n\nclass Cell extends Component {\n  shouldComponentUpdate = shouldPureComponentUpdate\n\n  props: ComponentizedCell\n\n  render() {\n    const {\n      id, rowWidth, rowHeight, updateDimensions, isResizeMode, isEditMode,\n      node: { inline, resizable, hasInlineNeighbour, focused }\n    } = this.props\n\n    const props = { ...this.props, styles: null }\n    return (\n      <div\n        className={classNames('ory-cell', gridClass(this.props), {\n          'ory-cell-has-inline-neighbour': hasInlineNeighbour,\n          [`ory-cell-inline-${inline || ''}`]: inline,\n          // 'ory-cell-bring-to-front': inline, && (!isLayoutMode && !isInsertMode && !isResizeMode),\n          'ory-cell-focused': focused,\n          'ory-cell-resizing-overlay': isResizeMode,\n        })}\n        onClick={stopClick(isEditMode)}\n      >\n        {resizable && (isResizeMode)\n          ? (\n            <Resizable\n              id={id}\n              rowWidth={rowWidth}\n              rowHeight={rowHeight}\n              updateDimensions={updateDimensions}\n              node={props.node}\n              steps={12}\n              onChange={props.resizeCell}\n            >\n              <Inner {...props} />\n            </Resizable>\n          ) : (\n            <Inner {...props} />\n          )}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isPreviewMode,\n  isEditMode,\n  isResizeMode,\n  // required by sub-components\n  isInsertMode,\n  isLayoutMode,\n  config: editableConfig,\n  node: purifiedNode,\n  rawNode: (state: any, props: any) => () => node(state, props)\n})\n\nconst mapDispatchToProps = (dispatch: Function, { id }: ComponentizedCell) => bindActionCreators({\n  resizeCell: resizeCell(id),\n  focusCell: focusCell(id),\n  blurAllCells\n}, dispatch)\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(Cell))\n"]}