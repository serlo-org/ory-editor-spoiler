'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint no-console: "off" */

var trace = function trace() {
  var e = new Error('dummy');
  return e.stack.replace(/^[^(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@').split('\n');
};

var Logger = function () {
  function Logger() {
    _classCallCheck(this, Logger);
  }

  _createClass(Logger, [{
    key: 'warn',

    /**
     * Logs a warning. Warnings are things that are exceptional, but easily to recover from.
     */
    value: function warn() {
      var _console;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      (_console = console).warn.apply(_console, ['Warning:'].concat(_toConsumableArray(args)));
    }

    /**
     * Logs a debug message. Debug messages are things that help developers debugging things.
     */

  }, {
    key: 'debug',
    value: function debug() {
      var _console2;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      (_console2 = console).log.apply(_console2, ['Debug:'].concat(_toConsumableArray(args)));
    }

    /**
     * Logs an info. Infos are things that might be interesting for someone who needs to take a closer look.
     */

  }, {
    key: 'info',
    value: function info() {
      var _console3;

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      (_console3 = console).log.apply(_console3, ['Info:'].concat(_toConsumableArray(args)));
    }

    /**
     * Logs an error. Error are things that are exceptional, but can be recovered from.
     */

  }, {
    key: 'error',
    value: function error() {
      var _console4;

      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      (_console4 = console).error.apply(_console4, ['Error:'].concat(_toConsumableArray(args)));
      console.error('Trace:', trace());
    }

    /**
     * Logs a fatal error. Fatal errors are things that are exceptional and can not be recovered from.
     */

  }, {
    key: 'fatal',
    value: function fatal() {
      var _console5;

      for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      (_console5 = console).error.apply(_console5, ['Fatal:'].concat(_toConsumableArray(args)));
      console.error('Trace:', trace());
      throw new Error(args.join(' '));
    }

    /**
     * Logs a message.
     */

  }, {
    key: 'log',
    value: function log() {
      var _console6;

      for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      (_console6 = console).log.apply(_console6, ['Fatal:'].concat(_toConsumableArray(args)));
      console.log('Trace:', trace());
    }
  }]);

  return Logger;
}();

var instance = new Logger();

exports.default = instance;
//# sourceMappingURL=index.js.map