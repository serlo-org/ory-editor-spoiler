{"version":3,"sources":["../../../src/service/logger/index.js"],"names":["trace","e","Error","stack","replace","split","Logger","args","warn","log","error","console","join","instance"],"mappings":";;;;;;;;;;;;AACA;;AAEA,IAAMA,QAAQ,SAARA,KAAQ,GAAqB;AACjC,MAAMC,IAAI,IAAIC,KAAJ,CAAU,OAAV,CAAV;AACA,SAAOD,EAAEE,KAAF,CAAQC,OAAR,CAAgB,gBAAhB,EAAkC,EAAlC,EACJA,OADI,CACI,aADJ,EACmB,EADnB,EAEJA,OAFI,CAEI,4BAFJ,EAEkC,gBAFlC,EAGJC,KAHI,CAGE,IAHF,CAAP;AAID,CAND;;IAQMC,M;;;;;;;;AACJ;;;2BAGqB;AAAA;;AAAA,wCAAbC,IAAa;AAAbA,YAAa;AAAA;;AACnB,2BAAQC,IAAR,kBAAa,UAAb,4BAA4BD,IAA5B;AACD;;AAED;;;;;;4BAGsB;AAAA;;AAAA,yCAAbA,IAAa;AAAbA,YAAa;AAAA;;AACpB,4BAAQE,GAAR,mBAAY,QAAZ,4BAAyBF,IAAzB;AACD;;AAED;;;;;;2BAGqB;AAAA;;AAAA,yCAAbA,IAAa;AAAbA,YAAa;AAAA;;AACnB,4BAAQE,GAAR,mBAAY,OAAZ,4BAAwBF,IAAxB;AACD;;AAED;;;;;;4BAGsB;AAAA;;AAAA,yCAAbA,IAAa;AAAbA,YAAa;AAAA;;AACpB,4BAAQG,KAAR,mBAAc,QAAd,4BAA2BH,IAA3B;AACAI,cAAQD,KAAR,CAAc,QAAd,EAAwBV,OAAxB;AACD;;AAED;;;;;;4BAGsB;AAAA;;AAAA,yCAAbO,IAAa;AAAbA,YAAa;AAAA;;AACpB,4BAAQG,KAAR,mBAAc,QAAd,4BAA2BH,IAA3B;AACAI,cAAQD,KAAR,CAAc,QAAd,EAAwBV,OAAxB;AACA,YAAM,IAAIE,KAAJ,CAAUK,KAAKK,IAAL,CAAU,GAAV,CAAV,CAAN;AACD;;AAED;;;;;;0BAGoB;AAAA;;AAAA,yCAAbL,IAAa;AAAbA,YAAa;AAAA;;AAClB,4BAAQE,GAAR,mBAAY,QAAZ,4BAAyBF,IAAzB;AACAI,cAAQF,GAAR,CAAY,QAAZ,EAAsBT,OAAtB;AACD;;;;;;AAGH,IAAMa,WAAW,IAAIP,MAAJ,EAAjB;;kBAEeO,Q","file":"index.js","sourcesContent":["// @flow\n/* eslint no-console: \"off\" */\n\nconst trace = (): Array<string> => {\n  const e = new Error('dummy')\n  return e.stack.replace(/^[^(]+?[\\n$]/gm, '')\n    .replace(/^\\s+at\\s+/gm, '')\n    .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@')\n    .split('\\n')\n}\n\nclass Logger {\n  /**\n   * Logs a warning. Warnings are things that are exceptional, but easily to recover from.\n   */\n  warn(...args: any[]) {\n    console.warn('Warning:', ...args)\n  }\n\n  /**\n   * Logs a debug message. Debug messages are things that help developers debugging things.\n   */\n  debug(...args: any[]) {\n    console.log('Debug:', ...args)\n  }\n\n  /**\n   * Logs an info. Infos are things that might be interesting for someone who needs to take a closer look.\n   */\n  info(...args: any[]) {\n    console.log('Info:', ...args)\n  }\n\n  /**\n   * Logs an error. Error are things that are exceptional, but can be recovered from.\n   */\n  error(...args: any[]) {\n    console.error('Error:', ...args)\n    console.error('Trace:', trace())\n  }\n\n  /**\n   * Logs a fatal error. Fatal errors are things that are exceptional and can not be recovered from.\n   */\n  fatal(...args: any[]) {\n    console.error('Fatal:', ...args)\n    console.error('Trace:', trace())\n    throw new Error(args.join(' '))\n  }\n\n  /**\n   * Logs a message.\n   */\n  log(...args: any[]) {\n    console.log('Fatal:', ...args)\n    console.log('Trace:', trace())\n  }\n}\n\nconst instance = new Logger()\n\nexport default instance\n"]}