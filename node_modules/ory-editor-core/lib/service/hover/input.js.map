{"version":3,"sources":["../../../src/service/hover/input.js"],"names":["hoverService","computeCurrentDropPosition","actions","hover","monitor","component","matrixName","drag","getItem","mousePosition","getClientOffset","componentPosition","getBoundingClientRect","room","height","bottom","top","width","right","left","mouse","y","x","matrix","computeAndDispatchInsert","above","insertCellAbove","below","insertCellBelow","leftOf","insertCellLeftOf","rightOf","insertCellRightOf","inlineLeft","insertCellLeftInline","inlineRight","insertCellRightInline","clear","clearHover","computeAndDispatchHover","cellHoverAbove","cellHoverBelow","cellHoverLeftOf","cellHoverRightOf","cellHoverInlineLeft","cellHoverInlineRight"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;AAMA,IAAMA,eAAe,qBAArB;;AAEO,IAAMC,kEAA6B,SAA7BA,0BAA6B,CAACC,OAAD,EAAqBC,KAArB,EAA+CC,OAA/C,EAAiEC,SAAjE,EAAoFC,UAApF,EAA2G;AACnJ,MAAMC,OAAOH,QAAQI,OAAR,EAAb;AACA,MAAMC,gBAAgBL,QAAQM,eAAR,EAAtB;AACA;AACA,MAAMC,oBAAoB,2BAAYN,SAAZ,EAAuBO,qBAAvB,EAA1B;AACA,MAAMC,OAAa;AACjBC,YAASH,kBAAkBI,MAAlB,GAA2BJ,kBAAkBK,GADrC;AAEjBC,WAAQN,kBAAkBO,KAAlB,GAA0BP,kBAAkBQ;AAFnC,GAAnB;;AAKA,MAAMC,QAAgB;AACpBC,OAAIZ,cAAcY,CAAd,GAAkBV,kBAAkBK,GADpB;AAEpBM,OAAIb,cAAca,CAAd,GAAkBX,kBAAkBQ;AAFpB,GAAtB;;AAKAnB,eAAaG,KAAb,CAAmBI,IAAnB,EAAyBJ,KAAzB,EAAgCD,OAAhC,EAAyC,EAAEW,UAAF,EAAQO,YAAR,EAAeG,QAAQjB,UAAvB,EAAzC;AACD,CAhBM;;AAkBA,IAAMkB,2BAA2B,SAA3BA,wBAA2B,OASlBpB,OATkB,EASAC,SATA;AAAA,MASmBC,UATnB,uEASwC,OATxC;;AAAA,MACrBmB,KADqB,QACtCC,eADsC;AAAA,MAErBC,KAFqB,QAEtCC,eAFsC;AAAA,MAGpBC,MAHoB,QAGtCC,gBAHsC;AAAA,MAInBC,OAJmB,QAItCC,iBAJsC;AAAA,MAKhBC,UALgB,QAKtCC,oBALsC;AAAA,MAMfC,WANe,QAMtCC,qBANsC;AAAA,MAO1BC,KAP0B,QAOtCC,UAPsC;AAAA,MAQnCnC,KARmC;;AAAA,SASoDF,2BAA2B;AACrHoC,gBADqH;AAErHZ,gBAFqH;AAGrHE,gBAHqH;AAIrHE,kBAJqH;AAKrHE,oBALqH;AAMrHE,0BANqH;AAOrHE;AAPqH,GAA3B,EAQzFhC,KARyF,EAQlFC,OARkF,EAQzEC,SARyE,EAQ9DC,UAR8D,CATpD;AAAA,CAAjC;;;AAmBA,IAAMiC,0BAA0B,SAA1BA,uBAA0B,QASjBnC,OATiB,EASCC,SATD;AAAA,MASoBC,UATpB,uEASyC,OATzC;;AAAA,MACrBmB,KADqB,SACrCe,cADqC;AAAA,MAErBb,KAFqB,SAErCc,cAFqC;AAAA,MAGpBZ,MAHoB,SAGrCa,eAHqC;AAAA,MAInBX,OAJmB,SAIrCY,gBAJqC;AAAA,MAKhBV,UALgB,SAKrCW,mBALqC;AAAA,MAMfT,WANe,SAMrCU,oBANqC;AAAA,MAOzBR,KAPyB,SAOrCC,UAPqC;AAAA,MAQlCnC,KARkC;;AAAA,SASqDF,2BAA2B;AACrHoC,gBADqH;AAErHZ,gBAFqH;AAGrHE,gBAHqH;AAIrHE,kBAJqH;AAKrHE,oBALqH;AAMrHE,0BANqH;AAOrHE;AAPqH,GAA3B,EAQzFhC,KARyF,EAQlFC,OARkF,EAQzEC,SARyE,EAQ9DC,UAR8D,CATrD;AAAA,CAAhC","file":"input.js","sourcesContent":["import { findDOMNode } from 'react-dom'\n\nimport HoverService from '../hover'\n\nimport type { ComponentizedCell } from '../../types/editable'\nimport type { Vector, Room, Callbacks } from '../../types/hover'\nimport type { Monitor } from '../../types/react-dnd'\n\nconst hoverService = new HoverService()\n\nexport const computeCurrentDropPosition = (actions: Callbacks, hover: ComponentizedCell, monitor: Monitor, component: Object, matrixName: string) => {\n  const drag = monitor.getItem()\n  const mousePosition = monitor.getClientOffset()\n  /* eslint-disable react/no-find-dom-node */\n  const componentPosition = findDOMNode(component).getBoundingClientRect()\n  const room: Room = {\n    height: (componentPosition.bottom - componentPosition.top),\n    width: (componentPosition.right - componentPosition.left)\n  }\n\n  const mouse: Vector = {\n    y: (mousePosition.y - componentPosition.top),\n    x: (mousePosition.x - componentPosition.left)\n  }\n\n  hoverService.hover(drag, hover, actions, { room, mouse, matrix: matrixName })\n}\n\nexport const computeAndDispatchInsert = ({\n  insertCellAbove: above,\n  insertCellBelow: below,\n  insertCellLeftOf: leftOf,\n  insertCellRightOf: rightOf,\n  insertCellLeftInline: inlineLeft,\n  insertCellRightInline: inlineRight,\n  clearHover: clear,\n  ...hover\n}: ComponentizedCell, monitor: Monitor, component: Object, matrixName: string = '10x10') => computeCurrentDropPosition({\n  clear,\n  above,\n  below,\n  leftOf,\n  rightOf,\n  inlineLeft,\n  inlineRight\n}, hover, monitor, component, matrixName)\n\nexport const computeAndDispatchHover = ({\n  cellHoverAbove: above,\n  cellHoverBelow: below,\n  cellHoverLeftOf: leftOf,\n  cellHoverRightOf: rightOf,\n  cellHoverInlineLeft: inlineLeft,\n  cellHoverInlineRight: inlineRight,\n  clearHover: clear,\n  ...hover\n}: ComponentizedCell, monitor: Monitor, component: Object, matrixName: string = '10x10') => computeCurrentDropPosition({\n  clear,\n  above,\n  below,\n  leftOf,\n  rightOf,\n  inlineLeft,\n  inlineRight\n}, hover, monitor, component, matrixName)\n"]}