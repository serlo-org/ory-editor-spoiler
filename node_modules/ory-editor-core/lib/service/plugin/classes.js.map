{"version":3,"sources":["../../../src/service/plugin/classes.js"],"names":["Plugin","config","serialize","raw","unserialize","state","name","version","Component","IconComponent","text","Error","JSON","stringify","bind","ContentPlugin","createInitialState","handleRemoveHotKey","e","props","Promise","reject","handleFocusNextHotKey","resolve","handleFocusPreviousHotKey","handleFocus","handleBlur","reducer","action","allowInlineNeighbours","isInlineable","LayoutPlugin","createInitialChildren"],"mappings":"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","file":"classes.js","sourcesContent":["// @flow\n/* eslint-disable no-empty-function, no-unused-vars */\nimport React, { Component, Element } from 'react'\n\nexport type ContentPluginProps<T> = {\n  /**\n   * @member a unique identifier.\n   */\n    id: string,\n\n  /**\n   * @member if the cell is currently in readOnly mode.\n   */\n    readOnly: boolean,\n\n  /**\n   * @member the plugin's name\n   */\n    name: string,\n\n  /**\n   * @member the plugin's version\n   */\n    version: string,\n\n  /**\n   * @member if true, the cell is currently focused.\n   */\n    focused: boolean,\n\n  /**\n   * @member the plugin's state.\n   */\n    state: T,\n\n  /**\n   * Should be called with the new state if the plugin's state changes.\n   *\n   * @param state\n   */\n  onChange(state: Object): void\n}\n\nexport type LayoutPluginProps<T> = {\n  /**\n   * @member a unique identifier.\n   */\n    id: string,\n\n  /**\n   * @member if the cell is currently in readOnly mode.\n   */\n    readOnly: boolean,\n\n  /**\n   * @member if true, the cell is currently focused.\n   */\n    focused: boolean,\n\n  /**\n   * @member the plugin's state.\n   */\n    state: T,\n\n  /**\n   * Should be called with the new state if the plugin's state changes.\n   *\n   * @param state\n   */\n  onChange(state: Object): void\n}\n\n/**\n * @class the abstract class for content and layout plugins. It will be instantiated once and used for every cell that is equipped with it.\n */\nexport class Plugin {\n  constructor(config: any) {\n    const {\n      name, version, Component, IconComponent, text,\n      serialize,\n      unserialize,\n    } = config\n\n    if (!name || !version || !Component) {\n      throw new Error(`A plugin's version, name and Component must be defined, got ${JSON.stringify(config)}`)\n    }\n\n    this.name = name\n    this.version = version\n    this.Component = Component\n\n    this.IconComponent = IconComponent\n    this.text = text\n\n    this.serialize = serialize ? serialize.bind(this) : this.serialize\n    this.unserialize = unserialize ? unserialize.bind(this) : this.unserialize\n  }\n\n  /**\n   * @member a unique identifier of the plugin\n   */\n  name: string\n\n  /**\n   * @member the semantic version (www.semver.org) of this plugin.\n   */\n  version: string\n\n  /**\n   * @member the icon that will be shown in the toolbar.\n   */\n  IconComponent: any\n  // IconComponent: Element<*> | Component<*, *, *>\n\n  /**\n   * @member the plugin's react component.\n   */\n  Component: any\n  // Component: Element<*> | Component<*, *, *> | (props: any) => Element<*>\n\n  /**\n   * @member the text that will be shown alongside the icon in the toolbar.\n   */\n  text: string\n\n  /**\n   * Serialize a the plugin state\n   *\n   * @param raw the raw state.\n   * @returns the serialized state.\n   */\n  serialize = (raw: Object): Object => raw\n\n  /**\n   * Unserialize the plugin state.\n   *\n   * @param state the plugin state.\n   * @returns the unserialized state.\n   */\n  unserialize = (state: Object): Object => state\n}\n\n/**\n * @class this is the base class for content plugins.\n */\nexport class ContentPlugin extends Plugin {\n  constructor(config: any) {\n    super(config)\n    const {\n      handleRemoveHotKey,\n      handleFocusNextHotKey,\n      handleFocusPreviousHotKey,\n      handleFocus,\n      handleBlur,\n      createInitialState,\n      allowInlineNeighbours = false,\n      isInlineable = false,\n      reducer\n    } = config\n\n    this.isInlineable = isInlineable\n    this.allowInlineNeighbours = allowInlineNeighbours\n    this.handleRemoveHotKey = handleRemoveHotKey ? handleRemoveHotKey.bind(this) : this.handleRemoveHotKey\n    this.handleFocusNextHotKey = handleFocusNextHotKey ? handleFocusNextHotKey.bind(this) : this.handleFocusNextHotKey\n    this.handleFocusPreviousHotKey = handleFocusPreviousHotKey ? handleFocusPreviousHotKey.bind(this) : this.handleFocusPreviousHotKey\n    this.handleFocus = handleFocus ? handleFocus.bind(this) : this.handleFocus\n    this.handleBlur = handleBlur ? handleBlur.bind(this) : this.handleBlur\n    this.reducer = reducer ? reducer.bind(this) : this.reducer\n    this.createInitialState = createInitialState ? createInitialState.bind(this) : this.createInitialState\n  }\n\n  /**\n   * @member if isInlineable is true, the plugin is allowed to be placed with floating to left or right.\n   */\n  isInlineable: boolean\n\n  /**\n   * @member if true allows that isInlineable elements may be placed \"in\" this plugin.\n   */\n  allowInlineNeighbours: boolean\n\n  /**\n   * Create the plugin's initial state.\n   *\n   * @returns the initial state.\n   */\n  createInitialState = (): Object => ({})\n\n  /**\n   * Will be called when the user presses the delete key. When returning a resolving promise,\n   * the cell will be removed. If the promise is rejected, nothing happens.\n   *\n   * @param e\n   * @param props\n   * @returns a promise\n   */\n  handleRemoveHotKey = (e: Event, props: ContentPluginProps<*>): Promise<*> => Promise.reject()\n\n  /**\n   * Will be called when the user presses the right or down key. When returning a resolving promise,\n   * the next cell will be focused. If the promise is rejected, focus stays the same.\n   *\n   * @param e\n   * @param props\n   * @returns a promise\n   */\n  handleFocusNextHotKey = (e: Event, props: ContentPluginProps<*>): Promise<*> => Promise.resolve()\n\n  /**\n   * Will be called when the user presses the left or up key. When returning a resolving promise,\n   * the next cell will be focused. If the promise is rejected, focus stays the same.\n   *\n   * @param e\n   * @param props\n   * @returns a promise\n   */\n  handleFocusPreviousHotKey = (e: Event, props: ContentPluginProps<*>): Promise<*> => Promise.resolve()\n\n  /**\n   * This function will be called when one of the plugin's cell is blurred.\n   *\n   * @param props\n   */\n  handleFocus = (props: ContentPluginProps<*>): void => {}\n\n  /**\n   * This function will be called when one of the plugin's cell is focused.\n   *\n   * @param props\n   */\n  handleBlur = (props: ContentPluginProps<*>): void => {}\n\n  /**\n   * Specify a custom reducer for the plugin's cell.\n   *\n   * @param state\n   * @param action\n   */\n  reducer = (state: any, action: any) => state\n}\n\n/**\n * @class this is the base class for layout plugins.\n */\nexport class LayoutPlugin extends Plugin {\n  constructor(config: any) {\n    super(config)\n    const {\n      createInitialState,\n      createInitialChildren,\n    } = config\n\n    this.createInitialState = createInitialState ? createInitialState.bind(this) : this.createInitialState\n    this.createInitialChildren = createInitialChildren ? createInitialChildren.bind(this) : this.createInitialChildren\n  }\n\n  /**\n   * Create the plugin's initial state.\n   *\n   * @returns the initial state.\n   */\n  createInitialState = (): Object => ({})\n\n  /**\n   * Create the plugin's initial children (rows/cells).\n   *\n   * @returns the initial state.\n   */\n  createInitialChildren = (): Object => ({})\n}\n"]}