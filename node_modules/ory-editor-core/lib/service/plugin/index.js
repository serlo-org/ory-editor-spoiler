'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateMissingIds = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _semver = require('semver');

var _classes = require('./classes');

var _default = require('./default');

var _default2 = _interopRequireDefault(_default);

var _missing = require('./missing');

var _missing2 = _interopRequireDefault(_missing);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var find = function find(name) {
  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '*';
  return function (plugin) {
    return plugin.name === name && (0, _semver.satisfies)(plugin.version, version);
  };
};

/**
 * Iterate through an editable content tree and generate ids where missing.
 */
var generateMissingIds = exports.generateMissingIds = function generateMissingIds(props) {
  var rows = props.rows,
      cells = props.cells,
      id = props.id;


  if ((rows || []).length > 0) {
    props.rows = rows.map(generateMissingIds);
  } else if ((cells || []).length > 0) {
    props.cells = cells.map(generateMissingIds);
  }

  return _extends({}, props, { id: id || _uuid2.default.v4() });
};

/**
 * PluginService is a registry of all content and layout plugins known to the editor.
 */

var PluginService = function () {

  /**
   * Instantiate a new PluginService instance. You can provide your own set of content and layout plugins here.
   */
  function PluginService() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$content = _ref.content,
        content = _ref$content === undefined ? [] : _ref$content,
        _ref$layout = _ref.layout,
        layout = _ref$layout === undefined ? [] : _ref$layout;

    _classCallCheck(this, PluginService);

    _initialiseProps.call(this);

    this.plugins = {
      content: [_default2.default].concat(_toConsumableArray(content)).map(function (config) {
        return new _classes.ContentPlugin(config);
      }),
      layout: layout.map(function (config) {
        return new _classes.LayoutPlugin(config);
      })
    };
  }

  /**
   * Finds a layout plugin based on its name and version.
   */


  _createClass(PluginService, [{
    key: 'findLayoutPlugin',
    value: function findLayoutPlugin(name, version) {
      var plugin = this.plugins.layout.find(find(name, version));

      // TODO return a default layout plugin here instead
      if (!plugin) {
        throw new Error('Plugin ' + name + ' with version ' + version + ' not found');
      }

      return plugin;
    }

    /**
     * Finds a content plugin based on its name and version.
     */

  }, {
    key: 'findContentPlugin',
    value: function findContentPlugin(name, version) {
      var plugin = this.plugins.content.find(find(name, version));
      return plugin || new _classes.ContentPlugin((0, _missing2.default)({ name: name, version: version }));
    }

    /**
     * Returns a list of all known plugin names.
     */

  }, {
    key: 'getRegisteredNames',
    value: function getRegisteredNames() {
      return [].concat(_toConsumableArray(this.plugins.content.map(function (_ref2) {
        var name = _ref2.name;
        return name;
      })), _toConsumableArray(this.plugins.layout.map(function (_ref3) {
        var name = _ref3.name;
        return name;
      })));
    }
  }]);

  return PluginService;
}();

var _initialiseProps = function _initialiseProps() {
  var _this = this;

  this.unserialize = function (state) {
    var _state$rows = state.rows,
        rows = _state$rows === undefined ? [] : _state$rows,
        _state$cells = state.cells,
        cells = _state$cells === undefined ? [] : _state$cells,
        _state$content = state.content,
        content = _state$content === undefined ? {} : _state$content,
        _state$layout = state.layout,
        layout = _state$layout === undefined ? {} : _state$layout,
        inline = state.inline,
        size = state.size,
        id = state.id;

    var newState = { id: id, inline: inline, size: size };

    var _ref4 = content || {},
        _ref4$plugin = _ref4.plugin;

    _ref4$plugin = _ref4$plugin === undefined ? {} : _ref4$plugin;
    var _ref4$plugin$name = _ref4$plugin.name,
        contentName = _ref4$plugin$name === undefined ? null : _ref4$plugin$name,
        _ref4$plugin$version = _ref4$plugin.version,
        contentVersion = _ref4$plugin$version === undefined ? '*' : _ref4$plugin$version,
        contentState = _ref4.state;

    var _ref5 = layout || {},
        _ref5$plugin = _ref5.plugin;

    _ref5$plugin = _ref5$plugin === undefined ? {} : _ref5$plugin;
    var _ref5$plugin$name = _ref5$plugin.name,
        layoutName = _ref5$plugin$name === undefined ? null : _ref5$plugin$name,
        _ref5$plugin$version = _ref5$plugin.version,
        layoutVersion = _ref5$plugin$version === undefined ? '*' : _ref5$plugin$version,
        layoutState = _ref5.state;


    if (contentName) {
      var plugin = _this.findContentPlugin(contentName, contentVersion);
      newState.content = {
        plugin: plugin,
        state: plugin.unserialize(contentState)
      };
    }

    if (layoutName) {
      var _plugin = _this.findLayoutPlugin(layoutName, layoutVersion);
      newState.layout = {
        plugin: _plugin,
        state: _plugin.unserialize(layoutState)
      };
    }

    if ((rows || []).length) {
      newState.rows = rows.map(_this.unserialize);
    }

    if ((cells || []).length) {
      newState.cells = cells.map(_this.unserialize);
    }

    return generateMissingIds(newState);
  };

  this.serialize = function (state) {
    var _state$rows2 = state.rows,
        rows = _state$rows2 === undefined ? [] : _state$rows2,
        _state$cells2 = state.cells,
        cells = _state$cells2 === undefined ? [] : _state$cells2,
        content = state.content,
        layout = state.layout,
        inline = state.inline,
        size = state.size,
        id = state.id;


    var newState = { id: id, inline: inline, size: size };
    if (content && content.plugin) {
      newState.content = {
        plugin: { name: content.plugin.name, version: content.plugin.version },
        state: content.plugin.serialize(content.state)
      };
    }

    if (layout && layout.plugin) {
      newState.layout = {
        plugin: { name: layout.plugin.name, version: layout.plugin.version },
        state: layout.plugin.serialize(layout.state)
      };
    }

    if (rows.length) {
      newState.rows = rows.map(_this.serialize);
    }

    if (cells.length) {
      newState.cells = cells.map(_this.serialize);
    }

    return newState;
  };
};

exports.default = PluginService;
//# sourceMappingURL=index.js.map