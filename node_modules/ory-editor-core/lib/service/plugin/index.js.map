{"version":3,"sources":["../../../src/service/plugin/index.js"],"names":["find","name","version","plugin","generateMissingIds","props","rows","cells","id","length","map","v4","PluginService","content","layout","plugins","config","Error","unserialize","state","inline","size","newState","contentName","contentVersion","contentState","layoutName","layoutVersion","layoutState","findContentPlugin","findLayoutPlugin","serialize"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nimport uuid from 'uuid'\nimport { satisfies } from 'semver'\nimport { ContentPlugin, LayoutPlugin, Plugin } from './classes'\nimport defaultPlugin from './default'\nimport missing from './missing'\n\nconst find = (name: string, version: string = '*') => (plugin: Plugin): boolean => plugin.name === name && satisfies(plugin.version, version)\n\n/**\n * Iterate through an editable content tree and generate ids where missing.\n */\nexport const generateMissingIds = (props: Object): Object => {\n  const { rows, cells, id } = props\n\n  if ((rows || []).length > 0) {\n    props.rows = rows.map(generateMissingIds)\n  } else if ((cells || []).length > 0) {\n    props.cells = cells.map(generateMissingIds)\n  }\n\n  return { ...props, id: id || uuid.v4() }\n}\n\n/**\n * PluginService is a registry of all content and layout plugins known to the editor.\n */\nexport default class PluginService {\n  plugins: {\n    content: Array<ContentPlugin>,\n    layout: Array<LayoutPlugin>,\n  }\n\n  /**\n   * Instantiate a new PluginService instance. You can provide your own set of content and layout plugins here.\n   */\n  constructor({ content = [], layout = [] }: { content: [], layout: []} = {}) {\n    this.plugins = {\n      content: [defaultPlugin, ...content].map((config: any) => new ContentPlugin(config)),\n      layout: layout.map((config: any) => new LayoutPlugin(config)),\n    }\n  }\n\n  /**\n   * Finds a layout plugin based on its name and version.\n   */\n  findLayoutPlugin(name: string, version: string): LayoutPlugin {\n    const plugin = this.plugins.layout.find(find(name, version))\n\n    // TODO return a default layout plugin here instead\n    if (!plugin) {\n      throw new Error(`Plugin ${name} with version ${version} not found`)\n    }\n\n    return plugin\n  }\n\n  /**\n   * Finds a content plugin based on its name and version.\n   */\n  findContentPlugin(name: string, version: string): ContentPlugin {\n    const plugin = this.plugins.content.find(find(name, version))\n    return plugin || new ContentPlugin(missing({ name, version }))\n  }\n\n  /**\n   * Returns a list of all known plugin names.\n   */\n  getRegisteredNames(): Array<string> {\n    return [\n      ...this.plugins.content.map(({ name }: Plugin) => name),\n      ...this.plugins.layout.map(({ name }: Plugin) => name)\n    ]\n  }\n\n  unserialize = (state: any): Object => {\n    const {\n      rows = [],\n      cells = [],\n      content = {},\n      layout = {},\n      inline,\n      size,\n      id\n    } = state\n    const newState: Object = { id, inline, size }\n\n    const { plugin: { name: contentName = null, version: contentVersion = '*' } = {}, state: contentState } = content || {}\n    const { plugin: { name: layoutName = null, version: layoutVersion = '*' } = {}, state: layoutState } = layout || {}\n\n    if (contentName) {\n      const plugin = this.findContentPlugin(contentName, contentVersion)\n      newState.content = {\n        plugin,\n        state: plugin.unserialize(contentState)\n      }\n    }\n\n    if (layoutName) {\n      const plugin = this.findLayoutPlugin(layoutName, layoutVersion)\n      newState.layout = {\n        plugin,\n        state: plugin.unserialize(layoutState)\n      }\n    }\n\n    if ((rows || []).length) {\n      newState.rows = rows.map(this.unserialize)\n    }\n\n    if ((cells || []).length) {\n      newState.cells = cells.map(this.unserialize)\n    }\n\n    return generateMissingIds(newState)\n  }\n\n  serialize = (state: Object): Object => {\n    const {\n      rows = [],\n      cells = [],\n      content,\n      layout,\n      inline,\n      size,\n      id\n    } = state\n\n    const newState: Object = { id, inline, size }\n    if (content && content.plugin) {\n      newState.content = {\n        plugin: { name: content.plugin.name, version: content.plugin.version },\n        state: content.plugin.serialize(content.state)\n      }\n    }\n\n    if (layout && layout.plugin) {\n      newState.layout = {\n        plugin: { name: layout.plugin.name, version: layout.plugin.version },\n        state: layout.plugin.serialize(layout.state)\n      }\n    }\n\n    if (rows.length) {\n      newState.rows = rows.map(this.serialize)\n    }\n\n    if (cells.length) {\n      newState.cells = cells.map(this.serialize)\n    }\n\n    return newState\n  }\n}\n"]}